---
// import { Icon } from 'astro-icon/components'

// const themes = [
//   { name: 'light', icon: 'solar:sun-outline', theme: 'casper' },
//   { name: 'dark', icon: 'solar:moon-outline', theme: 'laramie' },
//   { name: 'system', icon: 'solar:monitor-outline', theme: 'system' },
// ] as const
---

<!-- <div class="dropdown dropdown-end">
  <button
    id="theme-toggle"
    class="relative h-[2.1rem] w-[2.1rem] rounded-lg border border-base-content/25 bg-transparent hover:bg-neutral hover:text-primary p-1 transition-colors duration-200 flex items-center justify-center"
    aria-label="Toggle color theme"
  >
    {themes.map(({ name, icon }) => (
      <Icon
        name={icon}
        class="absolute size-4 transition-opacity duration-300"
        data-theme-icon={name}
        aria-hidden="true"
      />
    ))}
  </button>
</div> --><!-- <script is:inline data-astro-rerun>
// immediate theme initialization
(function () {
  const preference = localStorage.getItem('theme-preference') || 'system'
  const isDark = preference === 'dark'
    || (preference === 'system' && window.matchMedia('(prefers-color-scheme: dark)').matches)

  document.documentElement.classList.toggle('dark', isDark)
  document.documentElement.setAttribute('data-theme', isDark ? 'laramie' : 'casper')

  // Set initial icon states
  document.querySelectorAll('[data-theme-icon]').forEach((icon) => {
    icon.classList.toggle('opacity-0', icon.getAttribute('data-theme-icon') !== preference)
  })
})()

// theme management utilities
const themeUtils = {
  getSystemTheme() {
    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'
  },

  getCurrentTheme() {
    const preference = localStorage.getItem('theme-preference') || 'system'
    return preference === 'system' ? this.getSystemTheme() : preference
  },

  applyTheme(preference) {
    const isDark = preference === 'dark'
      || (preference === 'system' && this.getSystemTheme() === 'dark')

    document.documentElement.classList.toggle('dark', isDark)
    document.documentElement.setAttribute('data-theme', isDark ? 'laramie' : 'casper')

    document.querySelectorAll('[data-theme-icon]').forEach((icon) => {
      icon.classList.toggle('opacity-0', icon.getAttribute('data-theme-icon') !== preference)
    })

    localStorage.setItem('theme-preference', preference)
  },

  initialize() {
    const preference = localStorage.getItem('theme-preference') || 'system'
    this.applyTheme(preference)

    const themeToggle = document.getElementById('theme-toggle')
    if (themeToggle && !themeToggle.hasAttribute('data-theme-initialized')) {
      themeToggle.setAttribute('data-theme-initialized', 'true')
      themeToggle.addEventListener('click', () => {
        const currentPreference = localStorage.getItem('theme-preference') || 'system'
        const nextTheme = {
          light: 'dark',
          dark: 'system',
          system: 'light',
        }[currentPreference]
        this.applyTheme(nextTheme)
      })
    }

    // Set up system theme change listener
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
      if (localStorage.getItem('theme-preference') === 'system') {
        this.applyTheme('system')
      }
    })
  },
}

// Handle view transitions
document.addEventListener('astro:before-preparation', () => {
  const preference = localStorage.getItem('theme-preference') || 'system'
  themeUtils.applyTheme(preference)
})

document.addEventListener('astro:after-swap', () => {
  themeUtils.initialize()
})

// Initialize on page load
themeUtils.initialize()
</script>

<style>
/* Remove previous styles that were hiding icons */
</style> -->
