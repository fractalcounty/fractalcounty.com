---
import Button from '@/components/Button.astro'
import FormattedDate from '@/components/FormattedDate.astro'
import Link from '@/components/Link.astro'
import { Icon } from 'astro-icon/components'

interface Props {
  title: string
  subtitle?: string
  categories?: readonly string[]
  publishDate?: Date
  updatedDate?: Date
  readingTime?: string
  pages?: number
  isPost?: boolean
  links?: Array<{ label: string; url: string }>
  backUrl?: string
  backLabel?: string
  class?: string
  metadata?: Array<{
    label: string
    value: string | number
    url?: string
  }>
  metadataPosition?: 'top' | 'bottom'
  link?: {
    text: string
    href: string
    icon?: string
  }
}

const {
  title,
  subtitle,
  categories,
  publishDate,
  updatedDate,
  readingTime,
  pages,
  isPost,
  links = [],
  backUrl,
  backLabel,
  metadata = [],
  metadataPosition = 'top',
  class: classProp,
  link,
} = Astro.props
---

<header class:list={['animate space-y-2', classProp]}>
  <!-- move metadata section into a component for reuse -->
  {
    (() => {
      const metadataContent =
        isPost && publishDate ? (
          <div class='flex items-center gap-1.5 text-sm text-base-content/70'>
            <time datetime={publishDate.toISOString()}>
              <FormattedDate date={publishDate} />
            </time>

            {updatedDate && (
              <>
                <span aria-hidden='true'>&bull;</span>
                <time datetime={updatedDate.toISOString()}>
                  updated <FormattedDate date={updatedDate} format='relative' />
                </time>
              </>
            )}

            {readingTime && (
              <>
                <span aria-hidden='true'>&bull;</span>
                <span>{readingTime}</span>
              </>
            )}

            {pages && (
              <>
                <span aria-hidden='true'>&bull;</span>
                <span>
                  {pages} {pages === 1 ? 'page' : 'pages'}
                </span>
              </>
            )}
          </div>
        ) : metadata.length > 0 ? (
          <div class='flex flex-wrap items-center gap-3 text-sm text-base-content/70'>
            {metadata.map((item, i) => (
              <>
                {i > 0 && (
                  <span aria-hidden='true' class='select-none'>
                    &bull;
                  </span>
                )}
                <div class='flex items-center gap-1.5'>
                  <span class='opacity-70'>{item.label}:</span>
                  {item.url ? (
                    <Link
                      href={item.url}
                      class='hover:text-primary'
                      underline={false}
                    >
                      {item.value}
                    </Link>
                  ) : (
                    <span>{item.value}</span>
                  )}
                </div>
              </>
            ))}
          </div>
        ) : null

      return (
        <>
          {metadataPosition === 'top' && metadataContent}

          <div class='flex items-center justify-between gap-4'>
            <div class='flex flex-1 items-center justify-between'>
              <h1
                class:list={[
                  'title font-semibold text-base-content',
                  isPost ? 'text-xl' : 'text-base uppercase',
                ]}
              >
                {title}
              </h1>

              {link && (
                <Link
                  href={link.href}
                  class='inline-flex items-center gap-2 text-sm'
                  externalInNewTab={true}
                >
                  {link.text}
                  {link.icon && <Icon name={link.icon} class='size-4' />}
                </Link>
              )}
            </div>

            {backUrl && (
              <Button as='a' href={backUrl} arrow='left'>
                {backLabel}
              </Button>
            )}

            {categories && (
              <nav aria-label='categories' class='flex flex-wrap gap-2'>
                {categories.map((category) => (
                  <Button href={`#${category}`} data-category={category}>
                    {category}
                  </Button>
                ))}
              </nav>
            )}
          </div>

          {subtitle && <p class='text-sm text-base-content/70'>{subtitle}</p>}

          {metadataPosition === 'bottom' && metadataContent}

          {links.length > 0 && (
            <nav aria-label='related links' class='flex flex-wrap gap-4'>
              {links.map((link) => (
                <Link href={link.url} underline={true}>
                  {link.label}
                </Link>
              ))}
            </nav>
          )}
        </>
      )
    })()
  }
</header>
