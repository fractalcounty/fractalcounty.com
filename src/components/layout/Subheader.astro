---
import Button from '@/components/Button.astro'
import FormattedDate from '@/components/FormattedDate.astro'
import Link from '@/components/Link.astro'

interface Props {
  title: string
  subtitle?: string
  categories?: readonly string[]
  publishDate?: Date
  updatedDate?: Date
  readingTime?: string
  pages?: number
  isPost?: boolean
  links?: Array<{ label: string; url: string }>
  backUrl?: string
  backLabel?: string
}

const {
  title,
  subtitle,
  categories,
  publishDate,
  updatedDate,
  readingTime,
  pages,
  isPost,
  links = [],
  backUrl,
  backLabel,
} = Astro.props
---

<header class='space-y-2'>
  <!-- row 1: metadata (dates, reading time, etc) -->
  {
    isPost && publishDate && (
      <div class='flex items-center gap-1.5 text-sm text-base-content/70'>
        <time datetime={publishDate.toISOString()}>
          <FormattedDate date={publishDate} />
        </time>

        {updatedDate && (
          <>
            <span aria-hidden='true'>&bull;</span>
            <time datetime={updatedDate.toISOString()}>
              updated <FormattedDate date={updatedDate} format='relative' />
            </time>
          </>
        )}

        {readingTime && (
          <>
            <span aria-hidden='true'>&bull;</span>
            <span>{readingTime}</span>
          </>
        )}

        {pages && (
          <>
            <span aria-hidden='true'>&bull;</span>
            <span>
              {pages} {pages === 1 ? 'page' : 'pages'}
            </span>
          </>
        )}
      </div>
    )
  }

  <!-- row 2: main title with optional back button -->
  <div class='flex items-center justify-between gap-4'>
    <div class='flex-1'>
      <h1
        class:list={[
          'font-semibold text-base-content',
          isPost ? 'text-xl' : 'text-base uppercase',
        ]}
      >
        {title}
      </h1>
    </div>

    {
      backUrl && (
        <Button as='a' href={backUrl} arrow='left'>
          {backLabel}
        </Button>
      )
    }

    {
      categories && (
        <nav aria-label='categories' class='flex flex-wrap gap-2'>
          {categories.map((category) => (
            <Button href={`#${category}`} data-category={category}>
              {category}
            </Button>
          ))}
        </nav>
      )
    }
  </div>

  <!-- row 3: subtitle -->
  {subtitle && <p class='text-sm text-base-content/70'>{subtitle}</p>}

  <!-- row 4: related links -->
  {
    links.length > 0 && (
      <nav aria-label='related links' class='flex flex-wrap gap-4'>
        {links.map((link) => (
          <Link href={link.url} underline={true}>
            {link.label}
          </Link>
        ))}
      </nav>
    )
  }
</header>
