---
import { cn } from '@lib/utils'
import { Icon } from 'astro-icon/components'
import { Link as AstroLink } from 'astro-link'

type AriaRole =
  | 'alert'
  | 'alertdialog'
  | 'application'
  | 'article'
  | 'banner'
  | 'button'
  | 'cell'
  | 'checkbox'
  | 'columnheader'
  | 'combobox'
  | 'complementary'
  | 'contentinfo'
  | 'definition'
  | 'dialog'
  | 'directory'
  | 'document'
  | 'feed'
  | 'figure'
  | 'form'
  | 'grid'
  | 'gridcell'
  | 'group'
  | 'heading'
  | 'img'
  | 'link'
  | 'list'
  | 'listbox'
  | 'listitem'
  | 'log'
  | 'main'
  | 'marquee'
  | 'math'
  | 'menu'
  | 'menubar'
  | 'menuitem'
  | 'menuitemcheckbox'
  | 'menuitemradio'
  | 'navigation'
  | 'none'
  | 'note'
  | 'option'
  | 'presentation'
  | 'progressbar'
  | 'radio'
  | 'radiogroup'
  | 'region'
  | 'row'
  | 'rowgroup'
  | 'rowheader'
  | 'scrollbar'
  | 'search'
  | 'searchbox'
  | 'separator'
  | 'slider'
  | 'spinbutton'
  | 'status'
  | 'switch'
  | 'tab'
  | 'table'
  | 'tablist'
  | 'tabpanel'
  | 'term'
  | 'textbox'
  | 'timer'
  | 'toolbar'
  | 'tooltip'
  | 'tree'
  | 'treegrid'
  | 'treeitem'

export interface Props {
  href: string
  title?: string
  class?: string
  style?: string
  underline?: boolean
  externalInNewTab?: boolean
  icon?: boolean
  iconSize?: 'sm' | 'md' | 'lg'
  rel?: string
  prefetch?: boolean
  itemprop?: string
  itemscope?: boolean
  itemtype?: string
  'aria-label'?: string
  role?: AriaRole
}

const {
  href = '/',
  title,
  externalInNewTab,
  underline = true,
  icon = false,
  iconSize = 'md',
  prefetch = true,
  rel,
  class: className,
  itemprop,
  itemscope,
  itemtype,
  'aria-label': ariaLabel,
  role = 'link',
  ...rest
} = Astro.props

const shouldPrefetch =
  prefetch && typeof href === 'string' && href.startsWith('/')
// const isExternal =
//   typeof href === 'string' && (href.startsWith('http') || href.startsWith('//'))

// calculate final rel value by combining custom rel with default external link attributes
const finalRel = [rel, externalInNewTab ? 'noopener' : null]
  .filter(Boolean)
  .join(' ')

// Map iconSize to actual pixel values
const iconSizeMap = {
  sm: 'size-3',
  md: 'size-4',
  lg: 'size-5',
}
---

<AstroLink
  href={href}
  title={title}
  role={role}
  rel={finalRel}
  externalInNewTab={externalInNewTab}
  data-astro-prefetch={shouldPrefetch ? 'hover' : undefined}
  class={cn(
    icon ? 'inline-flex items-center gap-1.5' : 'inline',
    'transition-colors duration-300 ease-in-out',
    underline ?
      'underline decoration-theme-300 underline-offset-2 hover:decoration-theme-accent'
    : 'no-underline',
    'hover:text-theme-accent',
    className,
  )}
  {...itemprop ? { itemprop } : {}}
  {...itemscope ? { itemscope } : {}}
  {...itemtype ? { itemtype } : {}}
  aria-label={ariaLabel}
  {...rest}>
  <slot />
  {icon && <Icon name='lucide:external-link' class={iconSizeMap[iconSize]} />}
</AstroLink>
