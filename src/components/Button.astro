---
export interface Props {
  'as'?: 'button' | 'a'
  'href'?: string
  'class'?: string
  'style'?: string
  'id'?: string
  'data-category'?: string
  'data-active'?: string
  'arrow'?: 'left' | 'right' | 'up' | 'none'
  'arrowClass'?: string
}

const {
  as: Component = 'button',
  href,
  class: className,
  arrow = 'none',
  arrowClass,
  ...props
} = Astro.props

const baseStyles = 'relative group w-fit flex px-3 py-1.5 flex-nowrap rounded-lg border border-base-content/25 bg-transparent hover:bg-neutral text-base-content duration-200 ease-in-out'

// Add padding for arrow if present
const paddingClass = arrow !== 'none' ? 'pl-7' : ''

// Calculate rotation based on arrow direction
const rotationClass = {
  left: '',
  right: 'rotate-180',
  up: 'rotate-90',
  none: '',
}[arrow]
---

<Component
  href={href}
  class:list={[baseStyles, paddingClass, className]}
  {...props}
>
  {arrow !== 'none' && (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      class:list={[
        'absolute top-1/2 left-2 -translate-y-1/2 size-4 stroke-2 fill-none stroke-current group-hover:stroke-primary data-[active=true]:stroke-primary transition-colors duration-300 ease-in-out',
        rotationClass,
        arrowClass,
      ]}
    >
      <line
        x1="5"
        y1="12"
        x2="19"
        y2="12"
        class="translate-x-2 group-hover:translate-x-0 scale-x-0 group-hover:scale-x-100 transition-transform duration-300 ease-in-out"
      />
      <polyline
        points="12 5 5 12 12 19"
        class="translate-x-1 group-hover:translate-x-0 transition-transform duration-300 ease-in-out"
      />
    </svg>
  )}
  <div class="text-sm group-hover:text-primary data-[active=true]:text-primary transition-colors duration-300 ease-in-out">
    <slot />
  </div>
</Component>
