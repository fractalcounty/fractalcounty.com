---
export interface Props {
  as?: 'button' | 'a'
  href?: string
  class?: string
  style?: string
  id?: string
  'data-category'?: string
  arrow?: 'left' | 'right' | 'up' | 'none'
  arrowClass?: string
}

const {
  as: Component = 'button',
  href,
  class: className,
  arrow = 'none',
  arrowClass,
  'data-category': dataCategory,
  ...props
} = Astro.props

const baseStyles =
  'relative group w-fit flex px-3 py-1.5 flex-nowrap rounded-lg border border-base-content/25 bg-transparent hover:bg-neutral text-base-content duration-200 ease-in-out'

// Add padding for arrow if present
const paddingClass = arrow !== 'none' ? 'pl-7' : ''

// Calculate rotation based on arrow direction
const rotationClass = {
  left: '',
  right: 'rotate-180',
  up: 'rotate-90',
  none: '',
}[arrow]
---

<Component
  href={href}
  class:list={[baseStyles, paddingClass, className]}
  data-category={dataCategory}
  {...props}
>
  {
    arrow !== 'none' && (
      <svg
        xmlns='http://www.w3.org/2000/svg'
        viewBox='0 0 24 24'
        class:list={[
          'absolute left-2 top-1/2 size-4 -translate-y-1/2 fill-none stroke-current stroke-2 transition-colors duration-300 ease-in-out group-hover:stroke-primary',
          rotationClass,
          arrowClass,
        ]}
      >
        <line
          x1='5'
          y1='12'
          x2='19'
          y2='12'
          class='translate-x-2 scale-x-0 transition-transform duration-300 ease-in-out group-hover:translate-x-0 group-hover:scale-x-100'
        />
        <polyline
          points='12 5 5 12 12 19'
          class='translate-x-1 transition-transform duration-300 ease-in-out group-hover:translate-x-0'
        />
      </svg>
    )
  }
  <div
    class='text-sm transition-colors duration-300 ease-in-out group-hover:text-primary'
  >
    <slot />
  </div>
</Component>
