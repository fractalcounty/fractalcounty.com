---
import '../global.css';
import { ViewTransitions } from 'astro:transitions';
import { AstroFont } from 'astro-font';
import { SEO } from 'astro-seo';
import { getImagePath } from 'astro-opengraph-images';
import { SITE } from '@consts';
import { formatDateForOpenGraph } from '@lib/utils';

interface Props {
  title: string;
  description: string;
  image?: string;
  type?: 'website' | 'article';
  publishedTime?: string;
  tags?: string[];
}

const { title, description, image, type = 'website', publishedTime, tags = [] } = Astro.props;
const openGraphImageUrl = image || getImagePath({ url: Astro.url, site: Astro.site });
const defaultTags = ['chippledipple', 'fractal', 'county', 'art', 'gamedev'];
const combinedTags = Array.from(new Set([...tags, ...defaultTags]));
const tagsContent = combinedTags.join(', ');
---

<SEO
  canonical={Astro.url.href}
  title={title}
  titleTemplate={`${SITE.NAME} | %s`}
  titleDefault={SITE.NAME}
  description={description}
  charset='utf-8'
  openGraph={{
    basic: {
      title: title,
      type: type,
      image: openGraphImageUrl,
      url: Astro.url.href,
    },
    optional: {
      description: description,
      locale: 'en_US',
      siteName: SITE.NAME,
    },
    image: {
      url: openGraphImageUrl,
      secureUrl: openGraphImageUrl,
      type: 'image/png',
      width: 1200,
      height: 630,
      alt: `White text on a black background that says ${SITE.NAME} followed by ${title}`,
    },
    ...(type === 'article' && publishedTime && {
      article: {
        publishedTime: formatDateForOpenGraph(publishedTime),
        authors: [SITE.AUTHOR],
        tags: combinedTags
      }
    })
  }}
  twitter={{
    card: 'summary_large_image',
    site: '@fractalcounty',
    creator: '@fractalcounty',
    title: title,
    image: openGraphImageUrl,
    imageAlt: `White text on a black background that says ${SITE.NAME} followed by ${title}`,
    description: description,
  }}
  extend={{
    link: [
      {
        rel: 'icon',
        type: 'image/svg+xml',
        href: '/favicon-dark.svg',
        media: '(prefers-color-scheme: dark)'
      },
      {
        rel: 'icon',
        type: 'image/svg+xml',
        href: '/favicon-light.svg',
        media: '(prefers-color-scheme: light)'
      },
      {
        rel: 'icon',
        type: 'image/x-icon',
        href: '/favicon-light.svg'
      }
    ],
    meta: [
      {
        name: 'viewport',
        content: 'width=device-width,initial-scale=1'
      },
      {
        name: 'generator',
        content: Astro.generator
      },
      {
        name: 'keywords',
        content: tagsContent
      },
      {
        name: 'author',
        content: SITE.AUTHOR
      }
    ]
  }}
/>

<AstroFont
config={[
  {
    name: 'AlteHaasGrotesk',
    src: [
      {
        style: 'normal',
        weight: 'normal',
        path: './public/fonts/AlteHaasGroteskRegular.woff2',
      },
      {
        style: 'normal',
        weight: 'normal',
        path: './public/fonts/AlteHaasGroteskRegular.woff',
      },
      {
        style: 'normal',
        weight: 'bold',
        path: './public/fonts/AlteHaasGroteskBold.woff2',
      },
      {
        style: 'normal',
        weight: 'bold',
        path: './public/fonts/AlteHaasGroteskBold.woff',
      },
    ],
    preload: false,
    display: 'swap',
    selector: 'body',
    fallback: 'sans-serif',
  },
  {
    name: 'gg-sans',
    src: [
      {
        style: 'normal',
        weight: 'normal',
        path: './public/fonts/ggSansRegular.woff2',
      },
    ],
    preload: false,
    display: 'swap',
    fallback: 'sans-serif',
  },
  {
    name: 'gg-sans',
    src: [
      {
        style: 'normal',
        weight: 'bold',
        path: './public/fonts/ggSansSemiBold.woff2',
      },
    ],
    preload: false,
    display: 'swap',
    fallback: 'sans-serif',
  },
  {
    name: 'CommitMono',
    src: [
      {
        style: 'normal',
        weight: '400',
        path: './public/fonts/CommitMono.woff2',
      },
    ],
    preload: false,
    display: 'swap',
    selector: 'code',
    fallback: 'monospace',
  }
]}
/>

<ViewTransitions  />
<script>
  import type { TransitionBeforeSwapEvent } from 'astro:transitions/client';
  document.addEventListener('astro:before-swap', (e) =>
    [
      ...(e as TransitionBeforeSwapEvent).newDocument.head.querySelectorAll(
        'link[as="font"]'
      ),
    ].forEach((link) => link.remove())
  );
</script>

<script is:inline>

  function getTheme() {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme');
    }
    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
  }

  function setTheme(theme) {
    document.documentElement.setAttribute('data-theme', theme === 'dark' ? 'laramie' : 'casper');
    localStorage.setItem('theme', theme);
  }

  function updateTheme() {
    const theme = getTheme();
    setTheme(theme);
  }

  updateTheme();

  window.addEventListener('storage', (event) => {
    if (event.key === 'theme') {
      updateTheme();
    }
  });
  
  function init() {
    onScroll();
    animate();

    const backToTop = document.getElementById('back-to-top');
    backToTop?.addEventListener('click', (event) => scrollToTop(event));

    const backToPrev = document.getElementById('back-to-prev');
    backToPrev?.addEventListener('click', () => window.history.back());

    document.addEventListener('scroll', onScroll);
  }

  function animate() {
    const animateElements = document.querySelectorAll('.animate');

    animateElements.forEach((element, index) => {
      setTimeout(() => {
        element.classList.add('show');
      }, index * 150);
    });
  }

  function onScroll() {
    if (window.scrollY > 0) {
      document.documentElement.classList.add('scrolled');
    } else {
      document.documentElement.classList.remove('scrolled');
    }
  }

  function scrollToTop(event) {
    event.preventDefault();
    window.scrollTo({
      top: 0,
      behavior: 'smooth'
    });
  }

  document.addEventListener('DOMContentLoaded', () => init());
  document.addEventListener('astro:after-swap', () => init());
</script>