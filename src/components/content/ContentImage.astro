---
import type { ImageMetadata } from 'astro'
import Link from '@/components/Link.astro'
import ImageStructuredData from '@/components/meta/ImageStructuredData.astro'
import { Picture } from 'astro:assets'
import { getEntry } from 'astro:content'

// define preset sizes with relative units for consistent visual sizing
const PRESET_SIZES = {
  sm: {
    width: 480,
    height: undefined,
    sizes: '(min-width: 1024px) 33vw, (min-width: 768px) 50vw, 100vw',
  },
  md: {
    width: 720,
    height: undefined,
    sizes: '(min-width: 1024px) 50vw, (min-width: 768px) 75vw, 100vw',
  },
  lg: {
    width: 1080,
    height: undefined,
    sizes: '(min-width: 1024px) 75vw, 100vw',
  },
  auto: {
    width: undefined,
    height: undefined,
    sizes: '100vw',
  },
} as const

type PresetSize = keyof typeof PRESET_SIZES

interface Props {
  src: string | ImageMetadata | (string | ImageMetadata)[]
  title?: string
  collection?: 'art' | 'blog'
  type?: 'animation' | 'illustration' | 'webcomic'
  size?: PresetSize
  width?: number
  height?: number
  class?: string
  imageClass?: string
  alt?: string
  captionType?: 'hidden' | 'original' | 'alt'
  style?: boolean
  enableFullResLink?: boolean
}

const {
  src,
  title,
  collection,
  type,
  size = 'auto',
  width: explicitWidth,
  height: explicitHeight,
  class: className = '',
  imageClass = '',
  alt,
  captionType = alt ? 'alt' : 'hidden',
  style = true,
  enableFullResLink = true,
} = Astro.props

// resolve dimensions based on preset or explicit values
const { width, height, sizes } =
  explicitWidth || explicitHeight
    ? { width: explicitWidth, height: explicitHeight, sizes: '100vw' }
    : PRESET_SIZES[size]

// generate responsive widths based on preset size
const widths =
  size === 'auto'
    ? undefined
    : [width! * 0.5, width!, width! * 1.5].filter(Boolean)

// detect collection and id from url path segments
const pathSegments = Astro.url.pathname.split('/')
const detectedCollection =
  pathSegments[1] === 'art' || pathSegments[1] === 'blog'
    ? (pathSegments[1] as 'art' | 'blog')
    : undefined
const detectedId = detectedCollection ? pathSegments[2] : undefined

// if collection wasn't passed, use detected
const resolvedCollection = collection || detectedCollection
const resolvedId = detectedId

// glob for all content images
const images = import.meta.glob<{ default: ImageMetadata }>(
  '/src/content/**/*.{jpeg,jpg,png,gif,webp}'
)

// helper to resolve image paths to ImageMetadata
const resolveImage = async (
  path: string | ImageMetadata
): Promise<ImageMetadata> => {
  if (typeof path !== 'string') return path

  const fullPath =
    path.startsWith('./') && resolvedCollection && resolvedId
      ? `/src/content/${resolvedCollection}/${resolvedId}/${path.slice(2)}`
      : path.startsWith('/')
        ? `/src/content${path}`
        : `/src/content/${path}`

  if (!images[fullPath]) {
    throw new Error(`Image "${fullPath}" not found in content directory`)
  }

  return (await images[fullPath]()).default
}

// handle single image or array of images
const resolvedImages = Array.isArray(src)
  ? await Promise.all(src.map(resolveImage))
  : [await resolveImage(src)]

// update getPublicUrl to handle all hash patterns
const getPublicUrl = (image: ImageMetadata): string => {
  const segments = Astro.url.pathname.split('/').filter(Boolean)
  const collection = segments[0]
  const post = segments[1]

  // extract base filename by removing all possible hash patterns
  const filename = image.src
    .split('/')
    .pop()! // get last segment
    .replace(/\.[a-z0-9|-]+(_[a-z0-9|-]+)*\./i, '.') // remove all hash variations

  return `/images/${collection}/${post}/${filename}`
}

// update getFullResUrl to use public path
const getFullResUrl = (image: ImageMetadata): string => {
  return getPublicUrl(image)
}

// get post title if not provided
let resolvedTitle = title
if (!resolvedTitle && resolvedCollection && resolvedId) {
  const entry = await getEntry(resolvedCollection, resolvedId)
  resolvedTitle = entry?.data.title
}
---

<ImageStructuredData
  image={resolvedImages[0]}
  title={resolvedTitle || 'Image'}
  description={alt}
  url={Astro.url}
  caption={alt}
  isRepresentative={true}
  type={type}
  datePublished={collection && resolvedId
    ? undefined
    : new Date().toISOString()}
/>
<figure
  class:list={[
    'flex w-full flex-col items-center justify-center space-y-4',
    className,
    captionType !== 'hidden' ? 'mb-4' : 'mb-0',
  ]}
  itemscope
  itemtype='http://schema.org/ImageObject'
  aria-labelledby='image-title'
  style='padding-top: 1rem; padding-bottom: 1rem;'
>
  <div class:list={['w-full flex-col', Array.isArray(src) && 'flex']}>
    {
      resolvedImages.map((image, index) => (
        <div class:list={['w-full', index === 0 ? 'mt-0' : '-mt-10']}>
          {enableFullResLink && getFullResUrl(image) ? (
            <Link
              href={getFullResUrl(image)}
              class='tooltip tooltip-primary block w-full text-center focus-visible:outline-base-content'
              title={`View full resolution ${resolvedTitle}${resolvedImages.length > 1 ? ` - Image ${index + 1}` : ''}`}
              aria-label={`View full resolution version of ${resolvedTitle || 'image'}${resolvedImages.length > 1 ? ` - Image ${index + 1}` : ''}`}
              data-tip='Click to view original'
              rel='canonical license'
              itemprop='image'
              itemscope
              itemtype='http://schema.org/ImageObject'
            >
              <Picture
                src={image}
                alt={
                  alt ||
                  `${resolvedTitle || ''}${resolvedImages.length > 1 ? ` - Image ${index + 1}` : ''}`
                }
                formats={type === 'animation' ? ['webp'] : ['avif', 'webp']}
                fallbackFormat={type === 'animation' ? 'webp' : 'png'}
                loading={index === 0 ? 'eager' : 'lazy'}
                decoding={index === 0 ? 'sync' : 'async'}
                {width}
                {height}
                {widths}
                {sizes}
                class:list={[
                  'mx-auto',
                  style && 'rounded-xl shadow-md',
                  imageClass,
                  'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-base-content',
                ]}
                itemprop='image'
                role='img'
                aria-describedby={`image-desc-${index}`}
                itemprop='thumbnail'
                itemprop='url'
              />
            </Link>
          ) : (
            <Picture
              src={image}
              alt={
                alt ||
                `${resolvedTitle || ''}${resolvedImages.length > 1 ? ` - Image ${index + 1}` : ''}`
              }
              formats={type === 'animation' ? ['webp'] : ['avif', 'webp']}
              fallbackFormat={type === 'animation' ? 'webp' : 'png'}
              loading={index === 0 ? 'eager' : 'lazy'}
              decoding={index === 0 ? 'sync' : 'async'}
              {width}
              {height}
              {widths}
              {sizes}
              class:list={[
                'mx-auto',
                style && 'rounded-xl shadow-md',
                imageClass,
              ]}
              itemprop='image'
              role='img'
              aria-describedby={`image-desc-${index}`}
              itemprop='image'
            />
          )}
          <meta
            itemprop='name'
            content={resolvedTitle || `Image ${index + 1}`}
          />
          <meta
            itemprop='description'
            content={
              alt ||
              `${resolvedTitle || ''}${resolvedImages.length > 1 ? ` - Image ${index + 1}` : ''}`
            }
          />
          <meta
            itemprop='representativeOfPage'
            content={index === 0 ? 'true' : 'false'}
          />
          <div id={`image-desc-${index}`} class='sr-only'>
            {alt ||
              `${resolvedTitle || ''}${
                resolvedImages.length > 1 ? ` - Image ${index + 1}` : ''
              }`}
            {type && ` - This is a ${type} image`}
          </div>
          <meta itemprop='width' content={image.width.toString()} />
          <meta itemprop='height' content={image.height.toString()} />
          <meta itemprop='encodingFormat' content={`image/${image.format}`} />
          <meta
            itemprop='license'
            content='https://fractalcounty.com/unlicense'
          />
          {captionType !== 'hidden' &&
            enableFullResLink &&
            getFullResUrl(image) && (
              <figcaption
                class='-mb-2 -mt-4 text-center text-sm leading-relaxed'
                itemprop='alt'
                id={`alt-${index}`}
              >
                <Link
                  href={getFullResUrl(image)}
                  underline={false}
                  class='italic text-accent-content/75 hover:underline hover:decoration-2'
                >
                  {captionType === 'original'
                    ? 'View full resolution'
                    : alt ||
                      `${resolvedTitle || ''}${
                        resolvedImages.length > 1 ? ` - Image ${index + 1}` : ''
                      }`}
                </Link>
              </figcaption>
            )}
        </div>
      ))
    }
  </div>
</figure>
