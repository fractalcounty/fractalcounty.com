---
import type { ImageMetadata } from 'astro'
import Link from '@/components/Link.astro'
import ImageStructuredData from '@/components/meta/ImageStructuredData.astro'
import { Image } from 'astro:assets'
import { getEntry } from 'astro:content'

interface Props {
  src: string | ImageMetadata | (string | ImageMetadata)[]
  title?: string
  collection?: 'art' | 'blog'
  type?: 'animation' | 'illustration' | 'webcomic'
  class?: string
  imageClass?: string
  alt?: string
  captionType?: 'hidden' | 'original' | 'alt'
  style?: boolean
  enableFullResLink?: boolean
  loading?: 'eager' | 'lazy'
}

const {
  src,
  title,
  collection,
  type,
  class: className = '',
  imageClass = '',
  alt,
  captionType = alt ? 'alt' : 'hidden',
  style = true,
  enableFullResLink = true,
  loading = 'lazy',
} = Astro.props

// detect collection and id from url path segments
const pathSegments = Astro.url.pathname.split('/')
const detectedCollection =
  pathSegments[1] === 'art' || pathSegments[1] === 'blog' ?
    (pathSegments[1] as 'art' | 'blog')
  : undefined
const detectedId = detectedCollection ? pathSegments[2] : undefined

// if collection wasn't passed, use detected
const resolvedCollection = collection || detectedCollection
const resolvedId = detectedId

// glob for all content images
const images = import.meta.glob<{ default: ImageMetadata }>(
  '/src/content/**/*.{jpeg,jpg,png,gif,webp}',
  { eager: true },
)

// helper to resolve image paths to ImageMetadata
const resolveImage = async (
  path: string | ImageMetadata,
): Promise<ImageMetadata> => {
  if (typeof path !== 'string') return path

  const fullPath =
    path.startsWith('./') && resolvedCollection && resolvedId ?
      `/src/content/${resolvedCollection}/${resolvedId}/${path.slice(2)}`
    : path.startsWith('/') ? `/src/content${path}`
    : `/src/content/${path}`

  if (!images[fullPath]) {
    throw new Error(`Image "${fullPath}" not found in content directory`)
  }

  return images[fullPath].default
}

// handle single image or array of images
const resolvedImages =
  Array.isArray(src) ?
    await Promise.all(src.map(resolveImage))
  : [await resolveImage(src)]

// get post title if not provided
let resolvedTitle = title
if (!resolvedTitle && resolvedCollection && resolvedId) {
  const entry = await getEntry(resolvedCollection, resolvedId)
  resolvedTitle = entry?.data.title
}

// helper function to detect animation based on filename
function isAnimatedWebp(image: ImageMetadata): boolean {
  return (
    image.src.includes('.animated.webp') || image.src.includes('.animated.')
  )
}

// detect animation status for each image
const animationStatus = resolvedImages.map((img) => isAnimatedWebp(img))

// Add helper to get optimized image URL with correct format
const getOptimizedImageUrl = (image: ImageMetadata) => {
  const filename = image.src.split('/').pop()!
  return `/_astro/${filename}`
}
---

<figure
  class:list={[
    'flex w-full flex-col items-center justify-center',
    className,
    'not-prose',
    'mb-8 mt-10',
  ]}>
  {
    resolvedImages.map((image, index) => (
      <>
        <ImageStructuredData
          image={image}
          title={`${resolvedTitle || 'Image'}${resolvedImages.length > 1 ? ` - ${index + 1}` : ''}`}
          description={alt}
          url={Astro.url}
          caption={alt}
          isRepresentative={index === 0}
          type={type}
          collection={resolvedCollection}
          id={resolvedId}
        />
        <figure class:list={['w-full', index === 0 ? 'mt-0' : 'mt-2']}>
          <div>
            {enableFullResLink ?
              <Link
                href={getOptimizedImageUrl(image)}
                class='tooltip tooltip-accent block w-full text-center focus-visible:border-theme-100'
                title={`View full resolution ${resolvedTitle}${resolvedImages.length > 1 ? ` - ${index + 1}` : ''}`}
                aria-label={`View full resolution version of ${resolvedTitle || 'image'}${
                  resolvedImages.length > 1 ? ` - ${index + 1}` : ''
                }`}
                data-tip='Click to view original'
                rel='canonical license'
                prefetch={false}>
                <Image
                  src={image}
                  alt={
                    alt ||
                    `${resolvedTitle || ''}${resolvedImages.length > 1 ? ` - ${index + 1}` : ''}`
                  }
                  format={animationStatus[index] ? 'webp' : 'avif'}
                  loading={
                    index === 0 && loading === 'eager' ? 'eager' : 'lazy'
                  }
                  class:list={[
                    'mx-auto',
                    style && 'rounded-xl shadow-md',
                    imageClass,
                    'focus-visible:border-none focus-visible:ring-2 focus-visible:ring-theme-200',
                  ]}
                  role='img'
                  aria-describedby={`image-desc-${index}`}
                />
              </Link>
            : <Image
                src={image}
                alt={
                  alt ||
                  `${resolvedTitle || ''}${resolvedImages.length > 1 ? ` - ${index + 1}` : ''}`
                }
                format={animationStatus[index] ? 'webp' : 'avif'}
                loading={index === 0 && loading === 'eager' ? 'eager' : 'lazy'}
                class:list={[
                  'mx-auto',
                  style && 'rounded-xl shadow-md',
                  imageClass,
                ]}
                role='img'
                aria-describedby={`image-desc-${index}`}
              />
            }
          </div>

          <div id={`image-desc-${index}`} class='sr-only'>
            {alt ||
              `${resolvedTitle || ''}${resolvedImages.length > 1 ? ` - ${index + 1}` : ''}`}
            {type && ` - This is a ${type}`}
          </div>

          {captionType !== 'hidden' && (
            <figcaption
              class='mb-4 mt-4 text-center text-sm leading-relaxed'
              id={`alt-${index}`}>
              {enableFullResLink ?
                <Link
                  href={getOptimizedImageUrl(image)}
                  underline={false}
                  prefetch={false}
                  class='italic text-theme-content/75 hover:underline hover:decoration-2'>
                  {captionType === 'original' ?
                    'View full resolution'
                  : alt ||
                    `${resolvedTitle || ''}${resolvedImages.length > 1 ? ` - ${index + 1}` : ''}`
                  }
                </Link>
              : <span class='italic text-theme-content/75'>
                  {captionType === 'original' ?
                    'Full resolution not available'
                  : alt ||
                    `${resolvedTitle || ''}${resolvedImages.length > 1 ? ` - ${index + 1}` : ''}`
                  }
                </span>
              }
            </figcaption>
          )}
        </figure>
      </>
    ))
  }
</figure>
