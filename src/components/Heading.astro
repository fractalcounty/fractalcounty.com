---
import Button from '@/components/Button.astro'
import Date from '@/components/Date.astro'
import Divider from '@/components/Divider.astro'
import Link from '@/components/Link.astro'

interface Props {
  headingLevel?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'
  title: string
  subtitle?: string
  categories?: readonly string[]
  publishDate?: Date
  updatedDate?: Date
  readingTime?: string
  pages?: number
  isPost?: boolean
  links?: Array<{ label: string; url: string }>
  backUrl?: string
  backLabel?: string
  class?: string
  metadata?: Array<{
    label: string
    value: string | number
    url?: string
  }>
  metadataPosition?: 'top' | 'bottom'
}

const {
  headingLevel = 'h1',
  title,
  subtitle,
  categories,
  publishDate,
  updatedDate,
  readingTime,
  pages,
  isPost,
  links = [],
  backUrl,
  backLabel,
  metadata = [],
  metadataPosition = 'top',
  class: classProp,
} = Astro.props

// helper to determine if heading is h3 or lower
const isSubHeader = ['h3', 'h4', 'h5', 'h6'].includes(headingLevel)
---

<header class:list={['animate space-y-2', classProp]}>
  {
    (() => {
      const metadataContent =
        isPost && publishDate ?
          <div class='flex items-center gap-1.5 text-sm text-theme-content-weak'>
            <Date date={publishDate} />

            {updatedDate && (
              <>
                <span aria-hidden='true'>&bull; last edited</span>
                <Date date={updatedDate} format='relative' />
              </>
            )}

            {readingTime && (
              <>
                <span aria-hidden='true'>&bull;</span>
                <span>{readingTime}</span>
              </>
            )}

            {pages && (
              <>
                <span aria-hidden='true'>&bull;</span>
                <span>
                  {pages} {pages === 1 ? 'page' : 'pages'}
                </span>
              </>
            )}
          </div>
        : metadata.length > 0 ?
          <div class='flex flex-wrap items-center gap-3 text-sm'>
            {metadata.map((item, i) => (
              <>
                {i > 0 && (
                  <span aria-hidden='true' class='select-none'>
                    &bull;
                  </span>
                )}
                <div class='flex items-center gap-1.5'>
                  <span class='text-theme-secondary'>{item.label}:</span>
                  {item.url ?
                    <Link
                      href={item.url}
                      class='text-theme-content-weak hover:text-theme-primary'
                      underline={false}>
                      {item.value}
                    </Link>
                  : <span class='text-theme-content-weak'>{item.value}</span>}
                </div>
              </>
            ))}
          </div>
        : null

      return (
        <>
          {metadataPosition === 'top' && metadataContent}

          {isSubHeader ?
            <div class='flex w-full items-center gap-4'>
              {(() => {
                const Heading = headingLevel
                return (
                  <Heading
                    class:list={[
                      'whitespace-nowrap font-semibold uppercase',
                      'text-theme-content-weak', // weaker text for sub-headings
                    ]}>
                    {title}
                  </Heading>
                )
              })()}
              <div class='flex-1'>
                <Divider />
              </div>
              <div class='text-sm'>
                <slot name='link' />
              </div>
            </div>
          : <div class='flex items-center justify-between gap-4'>
              <div class='flex flex-1 items-center justify-between'>
                {(() => {
                  const Heading = headingLevel
                  return (
                    <Heading
                      class:list={[
                        'font-brand font-bold',
                        isPost ? 'text-xl normal-case' : 'text-base uppercase',
                      ]}>
                      {title}
                    </Heading>
                  )
                })()}
                <div class='text-sm'>
                  <slot name='link' />
                </div>
              </div>

              {backUrl && (
                <Button as='a' href={backUrl} arrow='left'>
                  <span class='hidden md:inline'>{backLabel}</span>
                  <span class='inline md:hidden' aria-label={backLabel} />
                </Button>
              )}

              {categories && (
                <nav aria-label='categories' class='flex flex-wrap gap-2'>
                  {categories.map((category) => (
                    <Button href={`#${category}`} data-category={category}>
                      {category}
                    </Button>
                  ))}
                </nav>
              )}
            </div>
          }

          {subtitle && (
            <p class='text-sm text-theme-content-weak'>{subtitle}</p>
          )}

          {metadataPosition === 'bottom' && metadataContent}

          {links.length > 0 && (
            <nav aria-label='related links' class='flex flex-wrap gap-4'>
              {links.map((link) => (
                <Link href={link.url} underline={true} icon={true}>
                  {link.label}
                </Link>
              ))}
            </nav>
          )}
        </>
      )
    })()
  }
</header>
