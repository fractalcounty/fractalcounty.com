---
import type { CollectionEntry } from 'astro:content'
import { Icon } from 'astro-icon/components'
import ArtThumbnail from './ArtThumbnail.astro'
import Link from './Link.astro'

interface Props {
  arts: CollectionEntry<'art'>[]
  priority?: boolean
}

const { arts = [] } = Astro.props

const carouselItems = arts.map((art) => {
  const isMultiImage =
    art.data.type === 'webcomic' ||
    (art.data.type === 'illustration' &&
      Array.isArray(art.data.images) &&
      art.data.images.length > 1)
  const imageCount = Array.isArray(art.data.images) ? art.data.images.length : 1
  return { art, isMultiImage, imageCount }
})

const showSwipeIndicator = arts.length > 3

const carouselId = `carousel-${Math.random().toString(36).slice(2, 11)}`

const carouselLabel = 'Featured artwork gallery'
const carouselDescription = 'Scroll horizontally to view more artwork'
---

<section aria-label={carouselLabel} class='relative w-full'>
  <div class='sr-only'>{carouselDescription}</div>

  <div
    id={carouselId}
    class='carousel carousel-center w-full space-x-4 px-2'
    role='region'
    aria-label={carouselLabel}
    tabindex='0'
    aria-roledescription='carousel'
  >
    <ul class='flex w-full list-none gap-4'>
      {
        carouselItems.map(({ art, isMultiImage, imageCount }, index) => (
          <li
            class='carousel-item w-[calc(50%-0.5rem)] sm:w-[calc(33.333%-0.75rem)]'
            role='group'
            aria-roledescription='slide'
            aria-label={`Artwork ${index + 1} of ${carouselItems.length}: ${art.data.title}`}
          >
            <Link
              href={`/art/${art.slug}`}
              class='group relative aspect-square w-full overflow-hidden rounded-xl bg-base-300 transition-all duration-150 hover:shadow-md'
              underline={false}
              aria-label={`View details for ${art.data.title}`}
            >
              <ArtThumbnail art={art} size='sm' index={index} />

              <div
                class='absolute inset-0 bg-gradient-to-t from-base-100/80 via-base-100/50 to-transparent opacity-0 transition-opacity duration-300 group-hover:opacity-100'
                role='presentation'
              >
                <div class='absolute inset-0 flex flex-col justify-end bg-gradient-to-t from-base-100/70 via-base-100/50 to-transparent p-4'>
                  <div class='space-y-0'>
                    {isMultiImage && (
                      <span
                        class='inline-flex items-center gap-x-1 text-xs font-bold text-primary'
                        aria-label={`Contains ${imageCount} ${art.data.type === 'webcomic' ? 'pages' : 'images'}`}
                      >
                        <svg
                          xmlns='http://www.w3.org/2000/svg'
                          class='h-4 w-4'
                          viewBox='0 0 24 24'
                          fill='none'
                          stroke='currentColor'
                          stroke-width='2'
                        >
                          {art.data.type === 'webcomic' ? (
                            <path
                              stroke-linecap='round'
                              stroke-linejoin='round'
                              d='M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10'
                            />
                          ) : (
                            <path
                              stroke-linecap='round'
                              stroke-linejoin='round'
                              d='M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z'
                            />
                          )}
                        </svg>
                        {imageCount}{' '}
                        {art.data.type === 'webcomic' ? 'pages' : 'images'}
                      </span>
                    )}
                    <h3 class='text-lg font-semibold text-base-content'>
                      {art.data.title}
                    </h3>
                    <p class='mt-2 text-sm text-base-content'>
                      {art.data.description}
                    </p>
                  </div>
                </div>
              </div>
            </Link>
          </li>
        ))
      }
    </ul>
  </div>

  {
    showSwipeIndicator && (
      <>
        <div
          class='pointer-events-none absolute right-0 top-0 z-10 h-full w-16 bg-gradient-to-l from-base-100/90 to-transparent opacity-0 transition-opacity duration-300 sm:w-24'
          data-carousel-gradient='right'
          data-carousel-id={carouselId}
          role='presentation'
          aria-hidden='true'
        >
          <div class='absolute right-2 top-1/2 flex -translate-y-1/2 flex-col items-center gap-1 sm:right-4'>
            <Icon
              name='mdi:chevron-right'
              class='h-8 w-8 animate-[bounce_2s_infinite] text-base-content sm:h-10 sm:w-10'
              aria-hidden='true'
            />
            <span class='sr-only'>More artwork available - scroll right</span>
          </div>
        </div>
        <div
          class='pointer-events-none absolute left-0 top-0 z-10 h-full w-16 bg-gradient-to-r from-base-100/90 to-transparent opacity-0 transition-opacity duration-300 sm:w-24'
          data-carousel-gradient='left'
          data-carousel-id={carouselId}
          role='presentation'
          aria-hidden='true'
        >
          <div class='absolute left-2 top-1/2 flex -translate-y-1/2 flex-col items-center gap-1 sm:left-4'>
            <Icon
              name='mdi:chevron-left'
              class='h-8 w-8 animate-[bounce_2s_infinite] text-base-content sm:h-10 sm:w-10'
            />
          </div>
        </div>
      </>
    )
  }

  <div class='sr-only'>
    Use left and right arrow keys to navigate between artwork
  </div>
</section>

<script is:inline>
  if ('IntersectionObserver' in window) {
    document.addEventListener('astro:page-load', () => {
      const scrollHandlers = new WeakMap()

      const updateGradients = (carousel) => {
        if (!carousel?.id) return

        const leftGradient = document.querySelector(
          `[data-carousel-gradient="left"][data-carousel-id="${carousel.id}"]`
        )
        const rightGradient = document.querySelector(
          `[data-carousel-gradient="right"][data-carousel-id="${carousel.id}"]`
        )

        if (!leftGradient || !rightGradient) return

        requestAnimationFrame(() => {
          const showLeft = carousel.scrollLeft > 20
          const showRight =
            carousel.scrollLeft <
            carousel.scrollWidth - carousel.clientWidth - 20

          leftGradient.classList.toggle('opacity-100', showLeft)
          rightGradient.classList.toggle('opacity-100', showRight)
        })
      }

      const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          const carousel = entry.target
          if (entry.isIntersecting) {
            updateGradients(carousel)

            const scrollHandler = () => updateGradients(carousel)
            carousel.addEventListener('scroll', scrollHandler, {
              passive: true,
            })
            scrollHandlers.set(carousel, scrollHandler)
          } else {
            const scrollHandler = scrollHandlers.get(carousel)
            if (scrollHandler) {
              carousel.removeEventListener('scroll', scrollHandler)
              scrollHandlers.delete(carousel)
            }
          }
        })
      })

      document.querySelectorAll('.carousel').forEach((carousel) => {
        observer.observe(carousel)
      })

      // move keyboard handler inside page-load event and scope it to active carousels
      const handleKeydown = (e) => {
        // only handle if we're on a page with a carousel
        const carousel = document.querySelector('.carousel')
        if (!carousel) return

        if (e.key === 'ArrowLeft') {
          carousel.scrollBy({ left: -200, behavior: 'smooth' })
        }
        if (e.key === 'ArrowRight') {
          carousel.scrollBy({ left: 200, behavior: 'smooth' })
        }
      }

      // add keyboard listener
      document.addEventListener('keydown', handleKeydown)

      // cleanup on page navigation
      document.addEventListener('astro:before-preparation', () => {
        document.removeEventListener('keydown', handleKeydown)
      })
    })
  }
</script>
