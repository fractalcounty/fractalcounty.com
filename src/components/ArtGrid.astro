---
import type { ImageMetadata } from 'astro'
import type { CollectionEntry } from 'astro:content'
import Link from '@/components/Link.astro'
import Thumbnail from '@/components/Thumbnail.astro'
import { Icon } from 'astro-icon/components'

interface Props {
  arts: CollectionEntry<'art'>[]
  class?: string
}

const { arts, class: className }: Props = Astro.props

function getImageData(art: CollectionEntry<'art'>) {
  const image =
    art.data.thumbnail ??
    (Array.isArray(art.data.images) ? art.data.images[0] : art.data.images)

  if (!image) throw new Error(`No image found for art: ${art.id}`)

  const alt = `${art.data.title} - ${art.data.description}`

  return { image, alt }
}
---

<div class={`grid gap-6 ${className}`}>
  {
    arts.map((art, index) => {
      const { image, alt } = getImageData(art)
      const isMultiImage =
        art.data.type === 'webcomic' ||
        art.data.type === 'animation' ||
        (art.data.type === 'illustration' &&
          Array.isArray(art.data.images) &&
          art.data.images.length > 1)
      const imageCount =
        Array.isArray(art.data.images) ? art.data.images.length : 1

      return (
        <Link
          href={`/art/${art.id}`}
          class='group relative aspect-square overflow-hidden rounded-xl bg-base-300 shadow-md transition-all duration-150 hover:shadow-lg hover:outline hover:outline-2 hover:outline-theme-accent/75'
          underline={false}
          data-index={index}>
          <Thumbnail image={image as ImageMetadata} alt={alt} index={index} />

          <div
            class='absolute inset-0 bg-gradient-to-t from-theme-800/70 via-theme-800/30 to-transparent opacity-0 transition-opacity duration-300 sm:group-hover:opacity-100'
            role='presentation'>
            <div class='absolute inset-0 flex flex-col justify-end bg-gradient-to-t from-theme-800/70 via-theme-800/30 to-transparent p-4'>
              <div class='space-y-0'>
                {isMultiImage && (
                  <span class='inline-flex items-center gap-x-1 text-xs font-bold text-theme-100'>
                    {art.data.type === 'webcomic' ?
                      <Icon name='lucide:file-text' size={'1rem'} />
                    : art.data.type === 'animation' ?
                      <Icon name='lucide:image-play' size={'1rem'} />
                    : <Icon name='lucide:image' size={'1rem'} />}
                    {imageCount}{' '}
                    {art.data.type === 'webcomic' ?
                      'pages'
                    : art.data.type === 'animation' ?
                      'files'
                    : 'images'}
                  </span>
                )}
                <h2 class='text-lg font-semibold text-theme-100'>
                  {art.data.title}
                </h2>
                <p class='mt-2 text-sm text-theme-200'>
                  {art.data.description}
                </p>
              </div>
            </div>
          </div>
        </Link>
      )
    })
  }
</div>

<style>
  .grid {
    grid-template-columns: repeat(2, 1fr);
  }

  @media (min-width: 768px) {
    .grid {
      grid-template-columns: repeat(3, 1fr);
    }
  }
</style>
