---
import type { ImageMetadata } from 'astro'
import type { CollectionEntry } from 'astro:content'
import ImageStructuredData from '@/components/meta/ImageStructuredData.astro'
import { Picture } from 'astro:assets'

interface Props {
  art: CollectionEntry<'art'>
  size?: 'sm' | 'md' | 'lg'
  index?: number
}

const { art, size = 'md', index = 0 }: Props = Astro.props

// define sizes as mutable arrays
const sizes = {
  sm: [300, 400, 400] as number[],
  md: [400, 500, 600] as number[],
  lg: [500, 600, 800] as number[],
} satisfies Record<string, number[]>

// Get the thumbnail or first image
const image =
  art.data.thumbnail ??
  (Array.isArray(art.data.images) ? art.data.images[0] : art.data.images)

if (!image) {
  throw new Error(`No image found for art: ${art.id}`)
}

// improve accessibility
const imgTitle = `${art.data.title} - ${art.data.description}`

// handle animated images
const formats =
  art.data.type === 'animation'
    ? ['webp'] // important: use webp for animations to not break the thumbnail
    : ['avif', 'webp'] // use either for static images

// calculate row and column position
const row = Math.floor(index / 3) // 3 columns
const isAboveFold = row < 3 // first 3 rows are above fold

// strict loading strategy based on row position
const loading = isAboveFold ? 'eager' : 'lazy'
---

<ImageStructuredData
  image={image as ImageMetadata}
  title={imgTitle}
  caption={art.data.thumbnailCaption}
  url={new URL(`/art/${art.id}`, Astro.site)}
  collection='art'
  id={art.id}
  isRepresentative={index === 0}
  datePublished={art.data.publishDate.toISOString()}
  dateModified={art.data.updatedDate?.toISOString()}
  keywords={art.data.tags}
  type={art.data.type}
/>
<Picture
  src={image as ImageMetadata}
  alt={imgTitle}
  title={imgTitle}
  formats={formats as ('avif' | 'webp')[]}
  format={art.data.type === 'animation' ? 'webp' : 'png'}
  fallbackFormat={art.data.type === 'animation' ? 'webp' : 'png'}
  widths={sizes[size]}
  sizes={`
    (max-width: 640px) ${sizes[size][0]}px,
    (max-width: 1024px) ${sizes[size][1]}px,
    ${sizes[size][2]}px
  `}
  class='h-full w-full object-cover shadow-md transition-transform duration-500 hover:shadow-lg group-hover:scale-105'
  loading={loading as 'eager' | 'lazy'}
  itemprop='image'
  itemscope
  itemtype='http://schema.org/ImageObject'
/>
