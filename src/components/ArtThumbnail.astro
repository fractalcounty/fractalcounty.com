---
import type { ImageMetadata } from 'astro'
import type { CollectionEntry } from 'astro:content'
import ImageStructuredData from '@/components/meta/ImageStructuredData.astro'
import { Picture } from 'astro:assets'

interface Props {
  art: CollectionEntry<'art'>
  size?: 'sm' | 'md' | 'lg'
  index?: number
}

const { art, size = 'md', index = 0 } = Astro.props

const sizes = {
  sm: 300,
  md: 400,
  lg: 600,
} as const

// Get the thumbnail or first image
const image =
  art.data.thumbnail ??
  (Array.isArray(art.data.images) ? art.data.images[0] : art.data.images)

if (!image) {
  throw new Error(`No image found for art: ${art.id}`)
}

// helper to get public url for full resolution image
// function getFullResUrl(image: ImageMetadata): string {
//   // simplify hash removal to match ContentImage approach
//   const filename = image.src
//     .split('/')
//     .pop()!
//     .replace(/\.[a-z0-9|-]+(_[a-z0-9|-]+)*\./i, '.')

//   // remove index.mdx from path
//   const cleanId = art.id.replace(/\/index$/, '')

//   return `/images/art/${cleanId}/${filename}`
// }

// improve accessibility
const imgTitle = `${art.data.title} - ${art.data.description}`
const width = sizes[size]

// Update the formats logic to handle animations
const formats =
  art.data.type === 'animation'
    ? ['webp'] // only use webp for animations
    : ['avif', 'webp'] // use both for static images
---

<ImageStructuredData
  image={image as ImageMetadata}
  title={imgTitle}
  caption={art.data.thumbnailCaption}
  url={new URL(`/art/${art.id}`, Astro.site)}
  collection='art'
  id={art.id}
  isRepresentative={index === 0}
  datePublished={art.data.publishDate.toISOString()}
  dateModified={art.data.updatedDate?.toISOString()}
  keywords={art.data.tags}
  type={art.data.type}
/>
<Picture
  src={image as ImageMetadata}
  alt={imgTitle}
  title={imgTitle}
  formats={formats}
  format={art.data.type === 'animation' ? 'webp' : 'png'}
  fallbackFormat={art.data.type === 'animation' ? 'webp' : 'png'}
  width={width}
  height={width}
  class='h-full w-full object-cover transition-transform duration-500 group-hover:scale-105'
  loading={index === 0 ? 'eager' : 'lazy'}
  decoding={index === 0 ? 'sync' : 'async'}
  fetchpriority={index === 0 ? 'high' : 'auto'}
  itemprop='image'
  itemscope
  itemtype='http://schema.org/ImageObject'
/>
