---
import type { CollectionEntry } from 'astro:content'
import ArtworkThumbnail from './ArtworkThumbnail.astro'
import Link from './Link.astro'

interface Props {
  artworks: CollectionEntry<'artwork'>[]
  priority?: boolean
  isHomepage?: boolean
}

const { artworks, priority = false, isHomepage = false } = Astro.props

// Optimize display artwork calculation
const displayArtworks = isHomepage ? artworks.slice(0, 3) : artworks
---

<div class:list={[
  'grid gap-6 animate',
  isHomepage ? 'homepage-grid' : 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3',
]}
>
  {displayArtworks.map((artwork, index) => {
    const isMultiImage = artwork.data.type === 'webcomic'
      || (artwork.data.type === 'art' && Array.isArray(artwork.data.images) && artwork.data.images.length > 1)
    const imageCount = Array.isArray(artwork.data.images) ? artwork.data.images.length : 1

    return (
      <Link
        href={`/art/${artwork.slug}`}
        class="group relative overflow-hidden rounded-xl bg-base-300 aspect-square hover:shadow-md transition-all duration-150"
        underline={false}
      >
        <ArtworkThumbnail
          artwork={artwork}
          size="GALLERY"
          priority={priority}
          index={index}
        />
        <div class="absolute inset-0 bg-gradient-to-t from-base-100/80 via-base-100/50 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300">
          <div class="absolute inset-0 flex flex-col justify-end p-4 bg-gradient-to-t from-base-100/70 via-base-100/50 to-transparent">
            <div class="space-y-0">
              {isMultiImage && (
                <span class="inline-flex items-center text-xs text-primary font-bold gap-x-1">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    {artwork.data.type === 'webcomic'
                      ? <path stroke-linecap="round" stroke-linejoin="round" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                      : <path stroke-linecap="round" stroke-linejoin="round" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />}
                  </svg>
                  {imageCount} {artwork.data.type === 'webcomic' ? 'pages' : 'images'}
                </span>
              )}
              <h3 class="text-lg lg:text-sm font-semibold text-base-content">
                {artwork.data.title}
              </h3>
              <p class="hidden sm:block mt-2 text-sm text-base-content">
                {artwork.data.description}
              </p>
            </div>
          </div>
        </div>
      </Link>
    )
  })}
</div>

<style>
/* Homepage-specific responsive grid */
.homepage-grid {
  grid-template-columns: repeat(2, 1fr);
}

@media (min-width: 768px) {
  .homepage-grid {
    grid-template-columns: repeat(3, 1fr);
  }
}

@media (max-width: 767px) {
  .homepage-grid > :nth-child(n+3) {
    display: none;
  }
}
</style>
