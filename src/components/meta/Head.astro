---
import { formatDateForOpenGraph, getCanonicalUrl } from '@lib/utils'
import { ClientRouter } from 'astro:transitions'
import { AstroFont } from 'astro-font'
import { getImagePath } from 'astro-opengraph-images'
import { SEO } from 'astro-seo'
import '@/global.css'

interface Props {
  title: string
  description: string
  image?: string
  type?: 'website' | 'article'
  publishDate?: string
  updatedDate?: string
  tags?: string[]
  noindex?: boolean
  nofollow?: boolean
  languageAlternates?: Array<{ href: string; hrefLang: string }>
}

const {
  title,
  description,
  image,
  type = 'website',
  publishDate,
  updatedDate,
  tags = [],
  noindex = false,
  nofollow = false,
  languageAlternates = [],
} = Astro.props

const openGraphImageUrl =
  image || getImagePath({ url: Astro.url, site: Astro.site })
const combinedTags = Array.from(new Set([...tags, ...site.defaultTags]))
const tagsContent = combinedTags.join(', ')
const canonicalUrl = getCanonicalUrl(Astro.url.pathname)
---

<link
  rel='preload'
  href='/fonts/AlteHaasGroteskBold.woff2'
  as='font'
  type='font/woff2'
  crossorigin
  fetchpriority='high'
/>

<SEO
  canonical={canonicalUrl}
  title={title}
  titleTemplate={`${site.name} | %s`}
  titleDefault={site.name}
  description={description}
  charset='utf-8'
  noindex={noindex}
  nofollow={nofollow}
  languageAlternates={languageAlternates}
  openGraph={{
    basic: {
      title: `${site.name} | ${title}`,
      type,
      image: openGraphImageUrl,
      url: Astro.url.href,
    },
    optional: {
      description,
      locale: 'en_US',
      siteName: site.name,
      localeAlternate: languageAlternates.map((alt) => alt.hrefLang),
    },
    image: {
      url: openGraphImageUrl,
      secureUrl: openGraphImageUrl,
      type: 'image/png',
      width: 1200,
      height: 630,
      alt: `White text on a black background that says ${site.name} followed by ${title}`,
    },
    ...(type === 'article' &&
      publishDate && {
        article: {
          publishedTime: formatDateForOpenGraph(publishDate),
          modifiedTime: updatedDate
            ? formatDateForOpenGraph(updatedDate)
            : formatDateForOpenGraph(publishDate),
          authors: [site.author.name],
          tags: combinedTags,
        },
      }),
  }}
  twitter={{
    card: 'summary_large_image',
    site: site.author.username,
    creator: site.author.username,
    title,
    image: openGraphImageUrl,
    imageAlt: `White text on a black background that says ${site.name} followed by ${title}`,
    description,
  }}
  extend={{
    link: [
      {
        rel: 'icon',
        type: 'image/svg+xml',
        href: '/icons/favicon-dark.svg',
        media: '(prefers-color-scheme: dark)',
      },
      {
        rel: 'icon',
        type: 'image/svg+xml',
        href: '/icons/favicon-light.svg',
        media: '(prefers-color-scheme: light)',
      },
      {
        rel: 'icon',
        type: 'image/x-icon',
        href: '/icons/favicon-light.svg',
      },
      {
        rel: 'alternate',
        type: 'application/rss+xml',
        title: `${site.name} RSS Feed`,
        href: '/rss.xml',
      },
      {
        rel: 'sitemap',
        href: '/sitemap-index.xml',
      },
      {
        rel: 'sitemap',
        href: '/sitemap-0.xml',
      },
    ],
    meta: [
      {
        name: 'viewport',
        content: 'width=device-width,initial-scale=1',
      },
      {
        name: 'generator',
        content: Astro.generator,
      },
      {
        name: 'keywords',
        content: tagsContent,
      },
      {
        name: 'author',
        content: site.author.name,
      },
      {
        name: 'format-detection',
        content: 'telephone=no',
      },
      {
        name: 'theme-color',
        content: '#1A1B26',
        media: '(prefers-color-scheme: dark)',
      },
      {
        name: 'theme-color',
        content: '#e6e7ed',
        media: '(prefers-color-scheme: light)',
      },
      {
        property: 'og:url',
        content: canonicalUrl,
      },
      {
        name: 'twitter:url',
        content: canonicalUrl,
      },
      ...(type === 'article' && publishDate
        ? [
            {
              property: 'article:published_time',
              content: formatDateForOpenGraph(publishDate),
            },
            {
              property: 'article:modified_time',
              content: updatedDate
                ? formatDateForOpenGraph(updatedDate)
                : formatDateForOpenGraph(publishDate),
            },
            {
              property: 'article:author',
              content: `${site.url}/#person`,
            },
          ]
        : []),
      {
        name: 'robots',
        content: noindex ? 'noindex,nofollow' : 'index,follow',
      },
      {
        property: 'content-language',
        content: 'en-US',
      },
      {
        property: 'og:locale',
        content: 'en_US',
      },
    ],
  }}
/>

<AstroFont
  config={[
    {
      name: 'AlteHaasGrotesk',
      src: [
        {
          style: 'normal',
          weight: 'bold',
          path: './public/fonts/AlteHaasGroteskBold.woff2',
        },
      ],
      preload: true,
      display: 'block',
      selector: '.title',
      fallback: 'sans-serif',
    },
    {
      name: 'Inter',
      src: [
        {
          style: 'normal',
          weight: '100 900',
          path: './public/fonts/Inter.woff2',
        },
        {
          style: 'italic',
          weight: '100 900',
          path: './public/fonts/InterItalic.woff2',
        },
      ],
      preload: true,
      display: 'swap',
      selector: 'body',
      fallback: 'sans-serif',
    },
  ]}
/>

<ClientRouter
  fallback='swap'
  transition:persist='theme,scroll'
  transition:animate={// respect reduced motion preference
  typeof window !== 'undefined' &&
  window.matchMedia('(prefers-reduced-motion: reduce)').matches
    ? 'none'
    : 'initial'}
/>

<style is:global>
  ::view-transition-old(*),
  ::view-transition-new(*) {
    animation: none;
    mix-blend-mode: normal;
  }

  /* ensure background colors persist during transitions */
  html::view-transition-group(root) {
    animation: none;
  }
</style>

<script>
  import type { TransitionBeforeSwapEvent } from 'astro:transitions/client'

  document.addEventListener('astro:before-swap', (e) =>
    [
      ...(e as TransitionBeforeSwapEvent).newDocument.head.querySelectorAll(
        'link[as="font"]'
      ),
    ].forEach((link) => link.remove())
  )
</script>

<script is:inline>
  function init() {
    onScroll()
    animate()

    const backToTop = document.getElementById('back-to-top')
    backToTop?.addEventListener('click', (event) => scrollToTop(event))

    const backToPrev = document.getElementById('back-to-prev')
    backToPrev?.addEventListener('click', () => window.history.back())

    document.addEventListener('scroll', onScroll, { passive: true })
  }

  function animate() {
    const animateElements = document.querySelectorAll('.animate')
    const MAX_DELAY = 300 // maximum total animation delay in ms

    animateElements.forEach((element, index) => {
      const delay = Math.min(index * 50, MAX_DELAY)
      setTimeout(() => {
        element.classList.add('show')
      }, delay)
    })
  }

  function onScroll() {
    // Debounce scroll events for better performance
    if (!window.requestAnimationFrame) {
      return requestAnimationFrame(() => {
        updateScrollState()
      })
    }
    updateScrollState()
  }

  function updateScrollState() {
    const shouldShowButton = window.scrollY > 0
    // Add a data attribute to track scroll state
    document.documentElement.dataset.scrolled = shouldShowButton
      ? 'true'
      : 'false'
  }

  // Handle scroll state during transitions
  document.addEventListener('astro:before-swap', () => {
    // Reset scroll state before swap
    document.documentElement.dataset.scrolled = 'false'
  })

  document.addEventListener('astro:after-swap', () => {
    // Update scroll state after swap
    updateScrollState()
  })

  function scrollToTop(event) {
    event.preventDefault()
    window.scrollTo({
      top: 0,
      behavior: 'smooth',
    })
  }

  document.addEventListener('DOMContentLoaded', () => init())
  document.addEventListener('astro:after-swap', () => init())

  // enforce laramie theme during transitions
  document.addEventListener('astro:before-swap', () => {
    document.documentElement.setAttribute('data-theme', 'laramie')
  })

  document.addEventListener('astro:after-swap', () => {
    document.documentElement.setAttribute('data-theme', 'laramie')
  })

  // ensure theme on initial load
  document.documentElement.setAttribute('data-theme', 'laramie')
</script>

<script>
  document.addEventListener('astro:page-load', () => {
    // announce page changes to screen readers
    const title = document.title
    const announcement = document.createElement('div')
    announcement.setAttribute('role', 'status')
    announcement.setAttribute('aria-live', 'polite')
    // Add styles to visually hide the element while keeping it accessible
    announcement.style.cssText = `
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  `
    announcement.textContent = `Navigated to ${title}`
    document.body.appendChild(announcement)
    setTimeout(() => announcement.remove(), 1000)
  })
</script>

<script>
  // handle scroll restoration
  if (history.scrollRestoration) {
    history.scrollRestoration = 'manual'
  }

  // reset scroll position on page transitions
  document.addEventListener('astro:before-swap', () => {
    window.scrollTo(0, 0)
  })

  // ensure theme persistence
  document.addEventListener('astro:after-swap', () => {
    document.documentElement.setAttribute('data-theme', 'laramie')
  })
</script>
