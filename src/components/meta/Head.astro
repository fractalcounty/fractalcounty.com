---
import { SITE } from '@consts'
import { formatDateForOpenGraph } from '@lib/utils'
import { ViewTransitions } from 'astro:transitions'
import { AstroFont } from 'astro-font'
import { getImagePath } from 'astro-opengraph-images'
import { SEO } from 'astro-seo'
import '@/global.css'

interface Props {
  title: string
  description: string
  image?: string
  type?: 'website' | 'article'
  publishedTime?: string
  tags?: string[]
}

const { title, description, image, type = 'website', publishedTime, tags = [] } = Astro.props
const openGraphImageUrl = image || getImagePath({ url: Astro.url, site: Astro.site })
const defaultTags = ['chippledipple', 'fractal', 'county', 'art', 'gamedev']
const combinedTags = Array.from(new Set([...tags, ...defaultTags]))
const tagsContent = combinedTags.join(', ');
---

<SEO
  canonical={Astro.url.href}
  title={title}
  titleTemplate={`${SITE.NAME} | %s`}
  titleDefault={SITE.NAME}
  description={description}
  charset="utf-8"
  openGraph={{
    basic: {
      title,
      type,
      image: openGraphImageUrl,
      url: Astro.url.href,
    },
    optional: {
      description,
      locale: 'en_US',
      siteName: SITE.NAME,
    },
    image: {
      url: openGraphImageUrl,
      secureUrl: openGraphImageUrl,
      type: 'image/png',
      width: 1200,
      height: 630,
      alt: `White text on a black background that says ${SITE.NAME} followed by ${title}`,
    },
    ...(type === 'article' && publishedTime && {
      article: {
        publishedTime: formatDateForOpenGraph(publishedTime),
        authors: [SITE.AUTHOR],
        tags: combinedTags,
      },
    }),
  }}
  twitter={{
    card: 'summary_large_image',
    site: '@fractalcounty',
    creator: '@fractalcounty',
    title,
    image: openGraphImageUrl,
    imageAlt: `White text on a black background that says ${SITE.NAME} followed by ${title}`,
    description,
  }}
  extend={{
    link: [
      {
        rel: 'icon',
        type: 'image/svg+xml',
        href: '/favicon-dark.svg',
        media: '(prefers-color-scheme: dark)',
      },
      {
        rel: 'icon',
        type: 'image/svg+xml',
        href: '/favicon-light.svg',
        media: '(prefers-color-scheme: light)',
      },
      {
        rel: 'icon',
        type: 'image/x-icon',
        href: '/favicon-light.svg',
      },
    ],
    meta: [
      {
        name: 'viewport',
        content: 'width=device-width,initial-scale=1',
      },
      {
        name: 'generator',
        content: Astro.generator,
      },
      {
        name: 'keywords',
        content: tagsContent,
      },
      {
        name: 'author',
        content: SITE.AUTHOR,
      },
    ],
  }}
/>

<AstroFont
  config={[
  {
    name: 'AlteHaasGrotesk',
    src: [
      {
        style: 'normal',
        weight: 'normal',
        path: './public/fonts/AlteHaasGroteskRegular.woff2',
      },
      {
        style: 'normal',
        weight: 'normal',
        path: './public/fonts/AlteHaasGroteskRegular.woff',
      },
      {
        style: 'normal',
        weight: 'bold',
        path: './public/fonts/AlteHaasGroteskBold.woff2',
      },
      {
        style: 'normal',
        weight: 'bold',
        path: './public/fonts/AlteHaasGroteskBold.woff',
      },
    ],
    preload: false,
    display: 'swap',
    selector: 'body',
    fallback: 'sans-serif',
  },
  {
    name: 'Chirp',
    src: [
      {
        style: 'normal',
        weight: '400',
        path: './public/fonts/ChirpRegular.woff2',
      },
      {
        style: 'normal',
        weight: '500',
        path: './public/fonts/ChirpMedium.woff2',
      },
      {
        style: 'normal',
        weight: '600',
        path: './public/fonts/ChirpBold.woff2',
      },
      {
        style: 'normal',
        weight: '700',
        path: './public/fonts/ChirpHeavy.woff2',
      },
    ],
    preload: false,
    display: 'swap',
    fallback: 'sans-serif',
  },
  {
    name: 'gg-sans',
    src: [
      {
        style: 'normal',
        weight: 'normal',
        path: './public/fonts/ggSansRegular.woff2',
      },
    ],
    preload: false,
    display: 'swap',
    fallback: 'sans-serif',
  },
  {
    name: 'gg-sans',
    src: [
      {
        style: 'normal',
        weight: 'bold',
        path: './public/fonts/ggSansSemiBold.woff2',
      },
    ],
    preload: false,
    display: 'swap',
    fallback: 'sans-serif',
  },
  {
    name: 'CommitMono',
    src: [
      {
        style: 'normal',
        weight: '400',
        path: './public/fonts/CommitMono.woff2',
      },
    ],
    preload: false,
    display: 'swap',
    selector: 'code',
    fallback: 'monospace',
  },
]}
/>

<ViewTransitions />
<script>
import type { TransitionBeforeSwapEvent } from 'astro:transitions/client'

document.addEventListener('astro:before-swap', e =>
  [
    ...(e as TransitionBeforeSwapEvent).newDocument.head.querySelectorAll(
      'link[as="font"]',
    ),
  ].forEach(link => link.remove()))
</script>

<script is:inline>
function getTheme() {
  if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
    return localStorage.getItem('theme')
  }
  return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'
}

function setTheme(theme) {
  document.documentElement.setAttribute('data-theme', theme === 'dark' ? 'laramie' : 'casper')
  localStorage.setItem('theme', theme)
}

function updateTheme() {
  const theme = getTheme()
  setTheme(theme)
}

updateTheme()

window.addEventListener('storage', (event) => {
  if (event.key === 'theme') {
    updateTheme()
  }
})

function init() {
  onScroll()
  animate()

  const backToTop = document.getElementById('back-to-top')
  backToTop?.addEventListener('click', event => scrollToTop(event))

  const backToPrev = document.getElementById('back-to-prev')
  backToPrev?.addEventListener('click', () => window.history.back())

  document.addEventListener('scroll', onScroll, { passive: true })
}

function animate() {
  const animateElements = document.querySelectorAll('.animate')
  const MAX_DELAY = 300 // maximum total animation delay in ms

  animateElements.forEach((element, index) => {
    const delay = Math.min(index * 50, MAX_DELAY)
    setTimeout(() => {
      element.classList.add('show')
    }, delay)
  })
}

function onScroll() {
  // Debounce scroll events for better performance
  if (!window.requestAnimationFrame) {
    return requestAnimationFrame(() => {
      updateScrollState()
    })
  }
  updateScrollState()
}

function updateScrollState() {
  const shouldShowButton = window.scrollY > 0
  // Add a data attribute to track scroll state
  document.documentElement.dataset.scrolled = shouldShowButton ? 'true' : 'false'
}

// Handle scroll state during transitions
document.addEventListener('astro:before-swap', () => {
  // Reset scroll state before swap
  document.documentElement.dataset.scrolled = 'false'
})

document.addEventListener('astro:after-swap', () => {
  // Update scroll state after swap
  updateScrollState()
})

function scrollToTop(event) {
  event.preventDefault()
  window.scrollTo({
    top: 0,
    behavior: 'smooth',
  })
}

document.addEventListener('DOMContentLoaded', () => init())
document.addEventListener('astro:after-swap', () => init())

// handle scroll restoration during view transitions
document.addEventListener('astro:page-load', () => {
  // restore scroll position if available
  const savedScroll = sessionStorage.getItem('scrollPosition')
  if (savedScroll) {
    window.scrollTo(0, Number.parseInt(savedScroll))
    sessionStorage.removeItem('scrollPosition')
  }
})

document.addEventListener('astro:before-preparation', () => {
  // save current scroll position before navigation
  sessionStorage.setItem('scrollPosition', window.scrollY.toString())
})
</script>

<script>
document.addEventListener('astro:page-load', () => {
  // announce page changes to screen readers
  const title = document.title
  const announcement = document.createElement('div')
  announcement.setAttribute('role', 'status')
  announcement.setAttribute('aria-live', 'polite')
  // Add styles to visually hide the element while keeping it accessible
  announcement.style.cssText = `
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  `
  announcement.textContent = `Navigated to ${title}`
  document.body.appendChild(announcement)
  setTimeout(() => announcement.remove(), 1000)
})
</script>
