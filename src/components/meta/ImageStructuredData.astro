---
import type { ImageMetadata } from 'astro'
import { SCHEMA_IDS } from '@/lib/schema'

interface Props {
  image: ImageMetadata
  title: string
  description?: string
  url: URL | string
  caption?: string
  isRepresentative?: boolean
  contentLocation?: string
  keywords?: string[]
  datePublished?: string
  dateModified?: string
  license?: string
  type?: 'photograph' | 'illustration' | 'animation' | 'webcomic'
  collection?: string
  id?: string
}

const {
  image,
  title,
  description,
  url,
  caption,
  isRepresentative = false,
  contentLocation,
  keywords,
  datePublished,
  dateModified,
  license = `${site.url}/unlicense`,
  collection,
  id,
} = Astro.props

const pageUrl = typeof url === 'string' ? new URL(url) : url

// Simplify path handling to match ContentImage
function getPublicPath(src: string, collection?: string, id?: string) {
  if (src.startsWith('/_astro/')) {
    const filename = src
      .split('/')
      .pop()! // get last segment
      .replace(/\.[a-z0-9|-]+(_[a-z0-9|-]+)*\./i, '.') // remove all hash variations

    // Clean the id by removing /index and .mdx
    const cleanId = id?.replace(/\/index(\.mdx)?$/, '')

    const relativePath =
      collection && cleanId
        ? `/images/${collection}/${cleanId}/${filename}`
        : `/images/${filename}`

    return new URL(relativePath, Astro.site).toString()
  }
  return src.startsWith('http') ? src : new URL(src, Astro.site).toString()
}

const publicPath = getPublicPath(image.src, collection, id)

const schema = {
  '@context': 'https://schema.org',
  '@type': 'ImageObject',
  '@id': `${pageUrl.toString()}#image`,
  name: title,
  description: description || caption || title,
  url: publicPath,
  contentUrl: publicPath,
  thumbnailUrl: publicPath,
  width: image.width,
  height: image.height,
  encodingFormat: `image/${image.format}`,
  caption,
  representativeOfPage: isRepresentative,
  license,
  datePublished,
  ...(dateModified && { dateModified }),
  keywords: keywords?.join(', '),
  author: {
    '@id': SCHEMA_IDS.PERSON,
  },
  copyrightHolder: {
    '@id': SCHEMA_IDS.PERSON,
  },
  ...(contentLocation && {
    contentLocation: {
      '@type': 'Place',
      name: contentLocation,
    },
  }),
  accessibilityHazard: ['noFlashingHazard'],
  accessibilityFeature: ['alternativeText', 'highContrast'],
  acquireLicensePage: license,
  creditText: site.author.name,
  creator: {
    '@type': 'Person',
    '@id': SCHEMA_IDS.PERSON,
  },
  copyrightNotice: `Unlicensed. ${new Date().getFullYear()} ${site.author.name}`,
}
---

<script
  type='application/ld+json'
  set:html={JSON.stringify(schema)}
  is:inline
/>
