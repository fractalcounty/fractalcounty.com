---
import type { CollectionEntry } from 'astro:content'
import { generateArticleSchema, generateBreadcrumbSchema, organizationSchema, personSchema, websiteSchema } from '@/lib/schema'
import { getImagePath } from 'astro-opengraph-images'

interface Props {
  entry: CollectionEntry<'blog' | 'projects'>
}

const { entry } = Astro.props
const pageUrl = new URL(Astro.url.pathname, Astro.site)
const ogImageUrl = getImagePath({ url: Astro.url, site: Astro.site })

// improve breadcrumb generation
const breadcrumbItems = [
  { name: 'Home', item: new URL('/', Astro.site).toString() },
  {
    name: entry.data.type === 'project' ? 'Projects' : 'Blog',
    item: new URL(
      `/${entry.data.type === 'project' ? 'projects' : 'blog'}/`,
      Astro.site,
    ).toString(),
  },
  {
    name: entry.data.title,
    item: pageUrl.toString(),
  },
]

// ensure image handling is consistent
const schema = {
  '@context': 'https://schema.org',
  '@graph': [
    generateArticleSchema(entry, pageUrl, ogImageUrl), // pass ogImageUrl
    generateBreadcrumbSchema(breadcrumbItems),
    {
      '@type': 'WebPage',
      '@id': pageUrl.toString(),
      'url': pageUrl.toString(),
      'name': entry.data.title,
      'description': entry.data.description,
      'isPartOf': {
        '@id': 'https://fractalcounty.com/#website',
      },
      'primaryImageOfPage': ogImageUrl
        ? {
            '@id': `${pageUrl.toString()}#primaryimage`,
          }
        : undefined,
      'breadcrumb': {
        '@id': `${pageUrl.toString()}#breadcrumb`,
      },
      'inLanguage': 'en-US',
    },
    // only include image if exists
    ...(ogImageUrl
      ? [
          {
            '@type': 'ImageObject',
            '@id': `${pageUrl.toString()}#primaryimage`,
            'url': ogImageUrl,
            'width': 1200,
            'height': 630,
          },
        ]
      : []),
    websiteSchema,
    organizationSchema,
    personSchema,
  ],
}
---

<script type="application/ld+json" set:html={JSON.stringify(schema)} />
