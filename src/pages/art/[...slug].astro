---
import type { ImageMetadata } from 'astro'
import type { CollectionEntry } from 'astro:content'
import ArtworkImage from '@/components/ArtworkImage.astro'
import Container from '@/components/layout/Container.astro'
import Subheader from '@/components/layout/Subheader.astro'
import ArtworkStructuredData from '@/components/meta/ArtworkStructuredData.astro'
import WebcomicViewer from '@/components/WebcomicViewer.astro'
import PageLayout from '@/layouts/PageLayout.astro'
import { Image } from 'astro:assets'
import { getCollection } from 'astro:content'

export async function getStaticPaths() {
  const artworks = (await getCollection('artwork'))
    .filter((artwork: CollectionEntry<'artwork'>) => !artwork.data.draft)
    .sort((a: CollectionEntry<'artwork'>, b: CollectionEntry<'artwork'>) =>
      b.data.date.valueOf() - a.data.date.valueOf(),
    )
  return artworks.map((artwork: CollectionEntry<'artwork'>) => ({
    params: { slug: artwork.slug },
    props: artwork,
  }))
}

// explicitly type the props to extend only the data property
type Props = {
  data: CollectionEntry<'artwork'>['data']
  slug: string
  id: string
  collection: string
  render: () => Promise<{
    Content: any
    headings: any[]
    remarkPluginFrontmatter: Record<string, any>
  }>
}

const artwork = Astro.props
const { Content } = await artwork.render()
const links = artwork.data.links || []

// Get the full URL and dimensions for the image
const firstImage = (Array.isArray(artwork.data.images)
  ? artwork.data.images[0]
  : artwork.data.images) as ImageMetadata

const imageData = {
  url: new URL(firstImage.src, Astro.site).toString(),
  width: firstImage.width,
  height: firstImage.height,
}
---

<PageLayout
  title={artwork.data.title}
  description={artwork.data.description}
  type="article"
  publishedTime={artwork.data.date}
  isWebcomic={artwork.data.type === 'webcomic'}
  isContentPage={true}
>
  <ArtworkStructuredData
    slot="structured-data"
    artwork={artwork}
    imageUrl={imageData.url}
    imageWidth={imageData.width}
    imageHeight={imageData.height}
  />

  <!-- Preload first image -->
  <link
    rel="preload"
    as="image"
    href={firstImage.src}
    slot="head"
  />

  <Container
    as="main"
    class:list={[
    artwork.data.type === 'webcomic' && 'max-w-5xl px-2 md:px-4',
  ]}
  >
    <div class:list={[
      'animate',
      artwork.data.type === 'webcomic' && 'md:fixed md:top-4 md:left-4 md:z-30',
    ]}
    >
    </div>

    <div class:list={[
      'my-6',
      artwork.data.type === 'webcomic' && 'text-center',
    ]}
    >
      <Subheader
        title={artwork.data.title}
        date={artwork.data.date}
        isPost={true}
        links={links}
        subtitle={artwork.data.description}
        pages={Array.isArray(artwork.data.images) ? artwork.data.images.length : 1}
        backUrl="/art"
        backLabel="Back"
      />
    </div>

    <article class:list={[
      'animate',
      artwork.data.type === 'webcomic' && 'mb-12 md:mb-20',
    ]}
    >
      <Content />
      <div class="mt-8">
        {artwork.data.type === 'webcomic' && Array.isArray(artwork.data.images)
          ? (
            <WebcomicViewer
              images={artwork.data.images as ImageMetadata[]}
              title={artwork.data.title}
              description={artwork.data.description}
            />
          )
          : Array.isArray(artwork.data.images)
            ? (
              <div class="space-y-4">
                {artwork.data.images.map((image, index) => (
                  <ArtworkImage
                    image={image}
                    title={artwork.data.title}
                    index={index}
                  />
                ))}
              </div>
            )
            : (
              <Image
                src={artwork.data.images as ImageMetadata}
                alt={artwork.data.title}
                class="w-full rounded-lg"
                loading="eager"
                decoding="async"
              />
            )}
      </div>
    </article>
  </Container>
</PageLayout>
