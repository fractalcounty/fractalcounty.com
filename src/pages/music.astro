---
import { Buffer } from 'node:buffer'
import Container from '@/components/layout/Container.astro'
import Subheader from '@/components/layout/Subheader.astro'
import Link from '@/components/Link.astro'
import CollectionPageStructuredData from '@/components/meta/CollectionPageStructuredData.astro'
import MusicPageStructuredData from '@/components/meta/MusicPageStructuredData.astro'
import ProfilePageStructuredData from '@/components/meta/ProfilePageStructuredData.astro'
import PageLayout from '@/layouts/PageLayout.astro'
import { Image } from 'astro:assets'
import { getCollection } from 'astro:content'
import { Icon } from 'astro-icon/components'

// fetch last.fm data
const LASTFM_USERNAME = 'fractalcounty'
const LASTFM_API_KEY = 'a31b66165177e6e17ef9f9e5d19bbab0'

const SPOTIFY_CLIENT_ID = '37fc316dad72479e979d835a0cb2b9af'
const SPOTIFY_CLIENT_SECRET = '17d3729adfc54961a5a8c46c03495330'

// add spotify auth and api functions
async function getSpotifyToken() {
  const basic = Buffer.from(
    `${SPOTIFY_CLIENT_ID}:${SPOTIFY_CLIENT_SECRET}`
  ).toString('base64')

  const response = await fetch('https://accounts.spotify.com/api/token', {
    method: 'POST',
    headers: {
      Authorization: `Basic ${basic}`,
      'Content-Type': 'application/x-www-form-urlencoded',
    },
    body: 'grant_type=client_credentials',
  })

  const data = await response.json()
  return data.access_token
}

async function getSpotifyArtistImage(artistName: string, token: string) {
  try {
    const response = await fetch(
      `https://api.spotify.com/v1/search?q=${encodeURIComponent(artistName)}&type=artist&limit=1`,
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    )
    const data = await response.json()
    return data.artists?.items[0]?.images[0]?.url
  } catch (error) {
    console.error(`Error fetching Spotify image for ${artistName}:`, error)
    return null
  }
}

async function getSpotifyTrackInfo(
  trackName: string,
  artistName: string,
  token: string
) {
  try {
    const response = await fetch(
      `https://api.spotify.com/v1/search?q=${encodeURIComponent(`track:${trackName} artist:${artistName}`)}&type=track&limit=1`,
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    )
    const data = await response.json()
    return {
      albumArt: data.tracks?.items[0]?.album?.images[0]?.url,
      previewUrl: data.tracks?.items[0]?.preview_url,
    }
  } catch (error) {
    console.error(`error fetching spotify info for ${trackName}:`, error)
    return { albumArt: null, previewUrl: null }
  }
}

async function getSpotifyAlbumInfo(
  albumName: string,
  artistName: string,
  token: string
) {
  try {
    const response = await fetch(
      `https://api.spotify.com/v1/search?q=${encodeURIComponent(`album:${albumName} artist:${artistName}`)}&type=album&limit=1`,
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    )
    const data = await response.json()
    return data.albums?.items[0]?.images[0]?.url
  } catch (error) {
    console.error(`error fetching spotify album art for ${albumName}:`, error)
    return null
  }
}

// Add these functions after your existing Spotify API functions

async function getPlaylistDetails(playlistId: string, token: string) {
  try {
    const response = await fetch(
      `https://api.spotify.com/v1/playlists/${playlistId}`,
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    )
    const data = await response.json()
    return {
      name: data.name,
      description: data.description,
      image: data.images[0]?.url,
      tracks: data.tracks.items.map((item: any) => ({
        name: item.track.name,
        artist: item.track.artists[0].name,
        album: item.track.album.name,
        duration: item.track.duration_ms,
        preview_url: item.track.preview_url,
        image: item.track.album.images[0]?.url,
        external_url: item.track.external_urls.spotify,
      })),
    }
  } catch (error) {
    console.error('error fetching playlist:', error)
    return null
  }
}

// modify fetchLastFmData to include spotify images
async function fetchLastFmData() {
  try {
    const [topArtists, topAlbums, userInfo, topTracks] = await Promise.all([
      // get top artists with better image quality
      fetch(
        `https://ws.audioscrobbler.com/2.0/?method=user.gettopartists&user=${LASTFM_USERNAME}&api_key=${LASTFM_API_KEY}&period=overall&limit=5&format=json&extended=1`
      ).then((res) => res.json()),
      // get top albums
      fetch(
        `https://ws.audioscrobbler.com/2.0/?method=user.gettopalbums&user=${LASTFM_USERNAME}&api_key=${LASTFM_API_KEY}&period=overall&limit=5&format=json`
      ).then((res) => res.json()),
      // get user info
      fetch(
        `https://ws.audioscrobbler.com/2.0/?method=user.getinfo&user=${LASTFM_USERNAME}&api_key=${LASTFM_API_KEY}&format=json`
      ).then((res) => res.json()),
      // increase limit to 12 to ensure we have enough tracks after filtering
      fetch(
        `https://ws.audioscrobbler.com/2.0/?method=user.gettoptracks&user=${LASTFM_USERNAME}&api_key=${LASTFM_API_KEY}&limit=12&extended=1&format=json`
      ).then((res) => res.json()),
    ])

    // Fetch additional track info to get album art
    const tracksWithAlbumArt = await Promise.all(
      topTracks.toptracks.track.map(async (track: any) => {
        const trackInfo = await fetch(
          `https://ws.audioscrobbler.com/2.0/?method=track.getInfo&user=${LASTFM_USERNAME}&api_key=${LASTFM_API_KEY}&artist=${encodeURIComponent(track.artist.name)}&track=${encodeURIComponent(track.name)}&format=json`
        ).then((res) => res.json())

        return {
          ...track,
          albumArt: trackInfo?.track?.album?.image?.[3]?.['#text'] || null,
        }
      })
    )

    // get spotify token first
    const spotifyToken = await getSpotifyToken()

    // filter and enhance tracks with spotify data
    const uniqueArtistTracks = await Promise.all(
      tracksWithAlbumArt
        .reduce((acc: any[], track: any) => {
          if (acc.length >= 6) return acc
          const artistExists = acc.some(
            (t) => t.artist.name === track.artist.name
          )
          if (!artistExists) {
            acc.push(track)
          }
          return acc
        }, [])
        .map(async (track: any) => {
          const spotifyInfo = await getSpotifyTrackInfo(
            track.name,
            track.artist.name,
            spotifyToken
          )
          return {
            ...track,
            albumArt:
              spotifyInfo.albumArt ||
              track.albumArt ||
              '/images/albums/album-placeholder.webp',
            previewUrl: spotifyInfo.previewUrl,
          }
        })
    )

    // enhance artists with spotify images
    const enhancedArtists = await Promise.all(
      topArtists.topartists.artist.map(async (artist: any) => {
        const spotifyImage = await getSpotifyArtistImage(
          artist.name,
          spotifyToken
        )
        return {
          ...artist,
          // fallback to lastfm image if spotify fails
          image: artist.image.map((img: any, i: number) => ({
            ...img,
            '#text': i === 3 ? spotifyImage || img['#text'] : img['#text'],
          })),
        }
      })
    )

    // enhance albums with spotify images
    const enhancedAlbums = await Promise.all(
      topAlbums.topalbums.album.map(async (album: any) => {
        const spotifyAlbumArt = await getSpotifyAlbumInfo(
          album.name,
          album.artist.name,
          spotifyToken
        )
        return {
          ...album,
          image: album.image.map((img: any, i: number) => ({
            ...img,
            '#text': i === 3 ? spotifyAlbumArt || img['#text'] : img['#text'],
          })),
        }
      })
    )

    return {
      artists: enhancedArtists,
      albums: enhancedAlbums,
      userInfo: userInfo.user,
      topTracks: uniqueArtistTracks,
    }
  } catch (error) {
    console.error('Error fetching data:', error)
    return { artists: [], albums: [], userInfo: null, topTracks: [] }
  }
}

const PLAYLIST_ID = '6mcNUOZBJVOl38rvUS5suh'
const spotifyToken = await getSpotifyToken()
const [lastFmData, playlistData] = await Promise.all([
  fetchLastFmData(),
  getPlaylistDetails(PLAYLIST_ID, spotifyToken),
])

const { artists, albums, userInfo, topTracks } = lastFmData
const playlist = playlistData

const bandcampAlbums = await getCollection('bandcamp')
---

<PageLayout title='Music' description='My music listening stats from Last.fm'>
  <MusicPageStructuredData
    slot='structured-data'
    lastFmData={lastFmData}
    bandcampAlbums={bandcampAlbums}
    playlist={playlist}
  />
  <CollectionPageStructuredData
    slot='structured-data'
    type='blog'
    name='Music'
    description='My music listening stats from Last.fm'
  />
  <ProfilePageStructuredData slot='structured-data' />

  <Container as='section'>
    <div class='animate mb-12 space-y-12'>
      <Subheader
        title='My Music'
        subtitle='albums i have released'
        metadataPosition='bottom'
        metadata={[
          {
            label: 'bandcamp',
            value: '@fractalcounty',
            url: 'https://fractalcounty.bandcamp.com',
          },
        ]}
      />

      <div class='grid grid-cols-2 gap-6 md:grid-cols-3'>
        {
          bandcampAlbums.map((album: any, index: number) => (
            <Link
              href={album.data.url}
              class={`group relative aspect-square overflow-hidden rounded-xl bg-base-300 shadow-md transition-all duration-150 hover:shadow-lg ${index >= 2 ? 'hidden md:block' : ''}`}
              underline={false}
              externalInNewTab={true}
            >
              <Image
                src={album.data.coverArt}
                alt={`${album.data.title} album art`}
                width={300}
                height={300}
                loading='eager'
                class='h-full w-full object-cover transition-transform duration-300 group-hover:scale-105'
              />
              <div class='absolute inset-0 bg-gradient-to-t from-base-100/90 via-base-100/40 to-transparent transition-all duration-300 group-hover:from-base-100/95 group-hover:via-base-100/50'>
                <div class='absolute inset-0 flex flex-col justify-end p-4'>
                  <div class='-space-y-0'>
                    <span class='inline-flex items-center gap-x-1 text-xs font-semibold text-primary opacity-0 transition-opacity duration-200 group-hover:opacity-100'>
                      {new Date(album.data.releaseDate).getFullYear()}
                    </span>
                    <h2 class='text-lg font-semibold text-base-content lg:text-sm'>
                      {album.data.title}
                    </h2>
                    {album.data.description && (
                      <p class='mt-1 text-sm text-base-content/80'>
                        {album.data.description}
                      </p>
                    )}
                  </div>
                </div>
              </div>
            </Link>
          ))
        }
      </div>
    </div>

    <div class='animate space-y-12'>
      <Subheader
        title='last.fm'
        subtitle='my listening stats from last.fm'
        metadataPosition='bottom'
        metadata={[
          {
            label: 'total plays',
            value: Number(userInfo?.playcount).toLocaleString(),
          },
          {
            label: 'scrobbling since',
            value: new Date(userInfo?.registered.unixtime * 1000).getFullYear(),
          },
          {
            label: 'profile',
            value: `@${LASTFM_USERNAME}`,
            url: `https://last.fm/user/${LASTFM_USERNAME}`,
          },
        ]}
      />

      <!-- top tracks grid -->
      <div class='space-y-4'>
        <div class='flex items-center justify-between'>
          <h2 class='title font-bold uppercase'>Top Tracks</h2>
          <Link
            href={`https://www.last.fm/user/${LASTFM_USERNAME}/library/tracks`}
            class='text-sm hover:text-primary'
            externalInNewTab={true}
          >
            View All
          </Link>
        </div>

        <div class='animate grid gap-6'>
          {
            topTracks.map((track: any, index: number) => (
              <Link
                href={track.url}
                class='group relative aspect-square overflow-hidden rounded-xl bg-base-300 shadow-md transition-all duration-150 hover:shadow-lg'
                underline={false}
                externalInNewTab={true}
                data-index={index}
              >
                <Image
                  src={track.albumArt}
                  alt={`Album art for ${track.name} by ${track.artist.name}`}
                  width={300}
                  height={300}
                  inferSize
                  loading='eager'
                  class='h-full w-full object-cover transition-transform duration-300 group-hover:scale-105'
                />
                <div class='absolute inset-0 bg-gradient-to-t from-base-100/90 via-base-100/40 to-transparent transition-all duration-300 group-hover:from-base-100/95 group-hover:via-base-100/50'>
                  <div class='absolute inset-0 flex flex-col justify-end p-4'>
                    <div class='-space-y-0'>
                      <span class='inline-flex items-center gap-x-1 text-xs font-semibold text-primary opacity-0 transition-opacity duration-200 group-hover:opacity-100'>
                        {track.playcount} plays
                      </span>
                      <h2 class='text-lg font-semibold text-base-content lg:text-sm'>
                        {track.name}
                      </h2>
                      <p class='mt-1 text-sm text-base-content/80'>
                        {track.artist.name}
                      </p>
                    </div>
                  </div>
                </div>
              </Link>
            ))
          }
        </div>
      </div>

      <!-- top artists and albums grid -->
      <div class='grid w-full grid-cols-1 gap-6 md:grid-cols-2'>
        <!-- top artists -->
        <div class='w-full space-y-4'>
          <div class='flex items-center justify-between'>
            <h2 class='title font-bold uppercase'>Top Artists</h2>
            <Link
              href={`https://www.last.fm/user/${LASTFM_USERNAME}/library/artists`}
              class='text-sm hover:text-primary'
              externalInNewTab={true}
            >
              View All
            </Link>
          </div>

          <div class='space-y-3'>
            {
              artists.map((artist: any) => (
                <Link
                  href={artist.url}
                  class='group flex h-[76px] w-full items-center gap-4 rounded-lg border border-base-content/25 bg-transparent p-3 transition-all duration-200 hover:bg-neutral'
                  underline={false}
                  externalInNewTab={true}
                >
                  <Image
                    src={
                      artist.image[3]['#text'] ||
                      artist.image[2]['#text'] ||
                      '/images/albums/album-placeholder.webp'
                    }
                    alt={`${artist.name}`}
                    width={48}
                    height={48}
                    inferSize
                    class='size-12 flex-shrink-0 rounded-lg object-cover'
                  />
                  <div class='min-w-0 flex-1'>
                    <h3 class='line-clamp-1 font-medium group-hover:text-primary'>
                      {artist.name}
                    </h3>
                    <p class='line-clamp-1 text-sm text-base-content/80'>
                      {Number(artist.playcount).toLocaleString()} plays
                    </p>
                  </div>
                </Link>
              ))
            }
          </div>
        </div>

        <!-- top albums -->
        <div class='mb-12 w-full space-y-4'>
          <div class='flex items-center justify-between'>
            <h2 class='title font-bold uppercase'>Top Albums</h2>
            <Link
              href={`https://www.last.fm/user/${LASTFM_USERNAME}/library/albums`}
              class='text-sm hover:text-primary'
              externalInNewTab={true}
            >
              View All
            </Link>
          </div>

          <div class='space-y-3'>
            {
              albums.map((album: any) => (
                <Link
                  href={album.url}
                  class='group flex h-[76px] w-full items-center gap-4 rounded-lg border border-base-content/25 bg-transparent p-3 transition-all duration-200 hover:bg-neutral'
                  underline={false}
                  externalInNewTab={true}
                >
                  <Image
                    src={
                      album.image[2]['#text'] ||
                      '/images/albums/album-placeholder.webp'
                    }
                    alt={`${album.name} by ${album.artist.name}`}
                    width={48}
                    height={48}
                    inferSize
                    class='size-12 flex-shrink-0 rounded-lg object-cover'
                  />
                  <div class='min-w-0 flex-1'>
                    <h3 class='line-clamp-1 font-medium group-hover:text-primary'>
                      {album.name}
                    </h3>
                    <p class='line-clamp-1 text-sm text-base-content/80'>
                      {album.artist.name} •{' '}
                      {Number(album.playcount).toLocaleString()} plays
                    </p>
                  </div>
                </Link>
              ))
            }
          </div>
        </div>
      </div>

      <style>
        .animate.grid {
          grid-template-columns: repeat(2, 1fr);
        }

        @media (min-width: 768px) {
          .animate.grid {
            grid-template-columns: repeat(3, 1fr);
          }
        }
      </style>

      <script>
        // handle grid item animations
        document.addEventListener('astro:page-load', () => {
          const grid = document.querySelector('.grid')
          if (!grid) return

          const items = grid.querySelectorAll<HTMLElement>('[data-index]')
          items.forEach((item, index) => {
            const delay = Math.min(index * 50, 300)
            item.style.opacity = '0'
            item.style.transform = 'translateY(10px)'
            item.style.transition =
              'opacity 0.2s ease-out, transform 0.2s ease-out'

            setTimeout(() => {
              item.style.opacity = '1'
              item.style.transform = 'translateY(0)'
            }, delay)
          })
        })
      </script>
    </div>
    <!-- spotify section -->
    <div class='animate space-y-12'>
      <Subheader
        title='Spotify'
        subtitle='my songs and playlists from Spotify'
      />
      <div class='space-y-4'>
        <div class='flex items-center justify-between'>
          <h2 class='title font-bold uppercase'>Featured Playlist</h2>

          <Link
            href={`https://open.spotify.com/playlist/${PLAYLIST_ID}`}
            class='inline-flex items-center gap-2 text-sm'
            externalInNewTab={true}
          >
            <!-- spotify logo -->
            Open in Spotify
            <Icon name='fluent:open-24-filled' class='size-4' />
          </Link>
        </div>

        <div
          id='customView'
          class='rounded-xl border border-base-content/25 p-4'
        >
          {
            playlist && (
              <div class='space-y-4'>
                <div class='flex gap-6'>
                  <Image
                    src={playlist.image}
                    alt={playlist.name}
                    class='size-32 rounded-lg border border-base-content/15 object-cover shadow-md'
                    loading='lazy'
                    inferSize
                  />
                  <div class='flex flex-col justify-center'>
                    <h3 class='text-xl font-bold'>{playlist.name}</h3>
                    <p class='text-base-content/75'>{playlist.description}</p>
                  </div>
                </div>

                <div class='divider my-2' />

                <div class='h-[240px] space-y-2 overflow-y-auto pr-2'>
                  {playlist.tracks.map((track: any) => (
                    <Link
                      href={track.external_url}
                      class='group flex items-center gap-3 rounded-lg p-2 transition-colors hover:bg-base-300'
                      underline={false}
                      externalInNewTab={true}
                    >
                      <Image
                        src={track.image}
                        alt={track.name}
                        class='size-12 rounded border border-base-content/25 object-cover shadow-sm'
                        loading='lazy'
                        inferSize
                        width={64}
                        height={64}
                      />
                      <div class='min-w-0 flex-1'>
                        <h4 class='line-clamp-1 font-medium group-hover:text-primary'>
                          {track.name}
                        </h4>
                        <p class='line-clamp-1 text-sm text-base-content/80'>
                          {track.artist}
                        </p>
                      </div>
                      <span class='text-sm text-base-content/60'>
                        {`${Math.floor(track.duration / 60000)}:${String(
                          Math.floor((track.duration % 60000) / 1000)
                        ).padStart(2, '0')}`}
                      </span>
                    </Link>
                  ))}
                </div>
              </div>
            )
          }
        </div>
      </div>
    </div>
  </Container>
</PageLayout>
