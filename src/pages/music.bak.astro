---
import Heading from '@/components/Heading.astro'
import Link from '@/components/Link.astro'
import CollectionPageStructuredData from '@/components/meta/CollectionPageStructuredData.astro'
import MusicPageStructuredData from '@/components/meta/MusicPageStructuredData.astro'
import ProfilePageStructuredData from '@/components/meta/ProfilePageStructuredData.astro'
import PeriodSelector from '@/components/PeriodSelector.astro'
import PageLayout from '@/layouts/PageLayout.astro'

// replace the spotify and lastfm functions with imports
import { fetchMultiPeriodLastFmData } from '@/lib/lastfm'
import { getPlaylistDetails, getSpotifyToken } from '@/lib/spotify'

import { Image, Picture } from 'astro:assets'
import { getCollection } from 'astro:content'

const LASTFM_USERNAME = 'fractalcounty'
const PLAYLIST_ID = '6mcNUOZBJVOl38rvUS5suh'

// Define the sections that will have separate period selectors
const sections = [
  'header',
  'loved-songs',
  'top-albums',
  'top-artists',
  'top-tracks',
]

// Simplified period options for static site - only use these three periods
const periodMap = {
  '1month': 'Last Month',
  '12month': 'Last Year',
  overall: 'All Time',
}

// Default period for all sections
const defaultPeriod = '12month' as keyof typeof periodMap

// Get the period from URL parameter or default
const urlPeriod = Astro.url.searchParams.get('period') || defaultPeriod
const globalPeriod = urlPeriod as keyof typeof periodMap

// Initialize section-specific periods (all starting with the global period)
const sectionPeriods: Record<string, keyof typeof periodMap> = {}
sections.forEach((section) => {
  sectionPeriods[section] = globalPeriod
})

// Fetch all period data at build time
const spotifyToken = await getSpotifyToken()
const allPeriodData = await fetchMultiPeriodLastFmData(
  LASTFM_USERNAME,
  import.meta.env.LASTFM_API_KEY,
  spotifyToken,
  Object.keys(periodMap),
)
const playlistData = await getPlaylistDetails(PLAYLIST_ID, spotifyToken)

// Get data for the initial period
const headerData =
  allPeriodData[sectionPeriods.header] || allPeriodData[defaultPeriod]
const lovedSongsData =
  allPeriodData[sectionPeriods['loved-songs']] || allPeriodData[defaultPeriod]
const topAlbumsData =
  allPeriodData[sectionPeriods['top-albums']] || allPeriodData[defaultPeriod]
const topArtistsData =
  allPeriodData[sectionPeriods['top-artists']] || allPeriodData[defaultPeriod]
const topTracksData =
  allPeriodData[sectionPeriods['top-tracks']] || allPeriodData[defaultPeriod]

// Extract data for each section
const { userInfo } = headerData
const lovedSongsTracks = lovedSongsData.topTracks.slice(0, 6)
const topAlbums = topAlbumsData.albums
const topArtists = topArtistsData.artists
const topTracks = topTracksData.topTracks

const playlist = playlistData
const bandcampAlbums = await getCollection('music')
---

<PageLayout
  title={site.pages.music.title}
  description={site.pages.music.description}
  isContentPage={true}>
  <MusicPageStructuredData
    slot='structured-data'
    lastFmData={headerData}
    bandcampAlbums={bandcampAlbums}
    playlist={playlist}
  />
  <CollectionPageStructuredData
    slot='structured-data'
    type='blog'
    name='Music'
    description='My music listening stats from Last.fm'
  />
  <ProfilePageStructuredData slot='structured-data' />

  <!-- Albums section -->
  <section id='my-albums' class='mb-16'>
    <div class='mb-8'>
      <Heading
        headingLevel='h1'
        title='Music'
        subtitle='my released albums & music projects'
        id='my-music'>
        <Link
          slot='link'
          href='https://fractalcounty.bandcamp.com'
          externalInNewTab={true}
          icon={true}>
          <span class='hidden sm:inline'>Listen on Bandcamp</span>
          <span class='sm:hidden' aria-hidden='true'>Link</span>
        </Link>
      </Heading>
    </div>

    <div class='grid grid-cols-2 gap-6 md:grid-cols-3'>
      {
        bandcampAlbums.map((album: any, index: number) => (
          <Link
            href={album.data.url}
            class={`group relative aspect-square overflow-hidden rounded-xl border-2 border-theme-700 bg-base-300 shadow-md transition-all duration-200 hover:border-theme-accent/75 hover:shadow-lg ${index >= 2 ? 'hidden md:block' : ''}`}
            underline={false}
            externalInNewTab={true}>
            <Image
              src={album.data.coverArt}
              alt={`${album.data.title} album art`}
              width={300}
              height={300}
              loading='eager'
              class='h-full w-full object-cover transition-transform duration-300 group-hover:scale-105'
            />
            <div
              class='absolute inset-0 bg-gradient-to-t from-theme-800/70 via-theme-800/30 to-transparent opacity-0 transition-opacity duration-300 sm:group-hover:opacity-100'
              role='presentation'>
              <div class='absolute inset-0 flex flex-col justify-end bg-gradient-to-t from-theme-800/70 via-theme-800/30 to-transparent p-4'>
                <div class='space-y-0'>
                  <span class='inline-flex items-center gap-x-1 text-xs font-bold text-theme-100 opacity-100'>
                    {new Date(album.data.releaseDate).getFullYear()}
                  </span>
                  <h2 class='text-lg font-semibold text-theme-100'>
                    {album.data.title}
                  </h2>
                  {album.data.description && (
                    <p class='mt-2 text-sm text-theme-200'>
                      {album.data.description}
                    </p>
                  )}
                </div>
              </div>
            </div>
          </Link>
        ))
      }
    </div>
  </section>

  <!-- last.fm section -->
  <section id='lastfm' class='mb-16 space-y-12'>
    <div class='flex items-start justify-between gap-4'>
      <Heading
        title='last.fm'
        subtitle={`my listening stats from last.fm`}
        metadataPosition='bottom'
        headingLevel='h2'
        id='lastfm-stats'
        metadata={[
          {
            label: 'plays',
            value: Number(userInfo?.playcount).toLocaleString(),
          },
          {
            label: 'since',
            value: new Date(userInfo?.registered.unixtime * 1000).getFullYear(),
          },
        ]}
      />
      <Link
        href={`https://www.last.fm/user/${LASTFM_USERNAME}`}
        class='mt-1 shrink-0 text-sm text-theme-300 hover:text-theme-accent'
        icon={true}
        externalInNewTab={true}>
        <span class='hidden sm:inline'>View on last.fm</span>
        <span class='sm:hidden' aria-hidden='true'>Link</span>
      </Link>
    </div>

    <!-- top albums grid -->
    <div id='top-albums' class='space-y-6'>
      <Heading
        headingLevel='h3'
        title='Top Albums'
        class='mb-0'
        id='top-albums'>
        <PeriodSelector
          slot='link'
          period={sectionPeriods['top-albums']}
          periodMap={periodMap}
          section='top-albums'
        />
      </Heading>

      <div
        class='grid grid-cols-2 gap-3 sm:grid-cols-3 md:grid-cols-4'
        id='top-albums-container'>
        {
          topAlbums.map((album: any, index: number) => (
            <Link
              href={album.url}
              class='group relative aspect-square overflow-hidden rounded-xl border-2 border-theme-700 bg-base-300 shadow-md transition-all duration-200 hover:border-theme-accent/75 hover:shadow-lg'
              underline={false}
              externalInNewTab={true}
              data-index={index}>
              <Image
                src={
                  album.image[3]['#text'] ||
                  album.image[2]['#text'] ||
                  '/images/album.webp'
                }
                alt={`Album art for ${album.name} by ${album.artist.name}`}
                width={300}
                height={300}
                inferSize
                loading='eager'
                class='h-full w-full object-cover transition-transform duration-300 group-hover:scale-105'
              />
              <div
                class='absolute inset-0 bg-gradient-to-t from-theme-800/70 via-theme-800/30 to-transparent transition-all duration-200'
                role='presentation'>
                <div class='absolute inset-0 flex flex-col justify-end bg-gradient-to-t from-theme-800/70 via-theme-800/30 to-transparent p-3 transition-all duration-200'>
                  <div class='space-y-0'>
                    <span class='inline-flex items-center gap-x-1 text-xs font-bold opacity-0 transition-all duration-200 group-hover:text-theme-accent group-hover:opacity-100'>
                      {Number(album.playcount).toLocaleString()} plays
                    </span>
                    <h4 class='line-clamp-2 text-sm/tight font-semibold text-theme-100 lg:text-base/tight'>
                      {album.name}
                    </h4>
                    <p class='line-clamp-1 text-xs text-theme-200'>
                      {album.artist.name}
                    </p>
                  </div>
                </div>
              </div>
            </Link>
          ))
        }
      </div>
    </div>

    <!-- loved songs (this month) -->
    <div id='loved-songs' class='space-y-6'>
      <Heading
        headingLevel='h3'
        title='Loved Songs'
        class='mb-0'
        id='loved-songs'>
        <PeriodSelector
          slot='link'
          period={sectionPeriods['loved-songs']}
          periodMap={periodMap}
          section='loved-songs'
        />
      </Heading>

      <div
        class='grid grid-cols-1 gap-4 sm:grid-cols-2'
        id='loved-songs-container'>
        {
          lovedSongsTracks.map((track: any) => (
            <Link
              href={track.url}
              class='group flex h-auto w-full items-center gap-4 rounded-lg border border-theme-500 bg-theme-800 p-3 shadow-md transition-all duration-200 hover:border hover:border-theme-accent/75 hover:bg-theme-700 hover:text-theme-200 hover:shadow-lg'
              underline={false}
              externalInNewTab={true}>
              <Image
                src={track.albumArt || '/images/album.webp'}
                alt={`Album artwork for ${track.name} by ${track.artist.name}`}
                width={64}
                height={64}
                inferSize
                loading='lazy'
                class='size-16 rounded-lg border border-theme-500 object-cover shadow-md'
              />
              <div class='min-w-0 flex-1'>
                <h4 class='line-clamp-1 font-medium text-theme-200 transition-all duration-200 group-hover:text-theme-100'>
                  {track.name}
                </h4>
                <p class='line-clamp-1 text-sm text-theme-300 transition-all duration-200 group-hover:text-theme-200'>
                  {track.artist.name} •{' '}
                  {Number(track.playcount).toLocaleString()} plays
                </p>
              </div>
            </Link>
          ))
        }
      </div>
    </div>

    <!-- top artists and tracks columns -->
    <div class='grid w-full grid-cols-1 gap-8 md:grid-cols-2'>
      <!-- top artists sub-section -->
      <div class='w-full space-y-6'>
        <Heading
          headingLevel='h3'
          title='Top Artists'
          class='mb-0'
          id='top-artists'>
          <PeriodSelector
            slot='link'
            period={sectionPeriods['top-artists']}
            periodMap={periodMap}
            section='top-artists'
          />
        </Heading>

        <div class='space-y-3' id='top-artists-container'>
          {
            topArtists.map((artist: any) => (
              <Link
                href={artist.url}
                class='group flex h-auto w-full items-center gap-4 rounded-lg border border-theme-500 bg-theme-800 p-3 shadow-md transition-all duration-200 hover:border hover:border-theme-accent/75 hover:bg-theme-700 hover:text-theme-200 hover:shadow-lg'
                underline={false}
                externalInNewTab={true}>
                <Image
                  src={
                    artist.image[3]['#text'] ||
                    artist.image[2]['#text'] ||
                    '/images/album.webp'
                  }
                  alt={`${artist.name}`}
                  width={48}
                  height={48}
                  inferSize
                  class='size-12 flex-shrink-0 rounded-lg object-cover'
                />
                <div class='min-w-0 flex-1'>
                  <h4 class='line-clamp-1 font-semibold text-theme-200 transition-all duration-200 group-hover:text-theme-100'>
                    {artist.name}
                  </h4>
                  <p class='line-clamp-1 text-sm font-normal text-theme-300 transition-all duration-200 group-hover:text-theme-300'>
                    {Number(artist.playcount).toLocaleString()} plays
                  </p>
                </div>
              </Link>
            ))
          }
        </div>
      </div>

      <!-- top tracks sub-section -->
      <div class='w-full space-y-6'>
        <div class='flex items-center justify-between gap-4'>
          <Heading
            headingLevel='h3'
            title='Top Tracks'
            class='mb-0'
            id='top-tracks'>
            <PeriodSelector
              slot='link'
              period={sectionPeriods['top-tracks']}
              periodMap={periodMap}
              section='top-tracks'
            />
          </Heading>
        </div>

        <div class='space-y-3' id='top-tracks-container'>
          {
            topTracks.map((track: any) => (
              <Link
                href={track.url}
                class='group flex h-auto w-full items-center gap-4 rounded-lg border border-theme-500 bg-theme-800 p-3 shadow-md transition-all duration-200 hover:border hover:border-theme-accent/75 hover:bg-theme-700 hover:text-theme-200 hover:shadow-lg'
                underline={false}
                externalInNewTab={true}>
                <Image
                  src={track.albumArt || '/images/album.webp'}
                  alt={`${track.name} by ${track.artist.name}`}
                  width={48}
                  height={48}
                  inferSize
                  class='size-12 flex-shrink-0 rounded-lg object-cover'
                />
                <div class='min-w-0 flex-1'>
                  <h4 class='line-clamp-1 font-medium text-theme-200 transition-all duration-200 group-hover:text-theme-100'>
                    {track.name}
                  </h4>
                  <p class='line-clamp-1 text-sm text-theme-300 transition-all duration-200 group-hover:text-theme-200'>
                    {track.artist.name} •{' '}
                    {Number(track.playcount).toLocaleString()} plays
                  </p>
                </div>
              </Link>
            ))
          }
        </div>
      </div>
    </div>
  </section>

  <!-- spotify section -->
  <section id='spotify-playlist' class='mb-16 space-y-8'>
    <Heading
      title='Featured Playlist'
      subtitle='my favorite music on Spotify'
      headingLevel='h2'
      id='spotify-playlist'>
      <Link
        slot='link'
        icon={true}
        href={`https://open.spotify.com/playlist/${PLAYLIST_ID}`}
        externalInNewTab={true}>
        <span class='hidden sm:inline'>Listen on Spotify</span>
        <span class='sm:hidden' aria-hidden='true'>Link</span>
      </Link>
    </Heading>

    <div
      id='customView'
      class='relative overflow-hidden rounded-xl border border-theme-500 bg-theme-800 shadow-md'>
      {
        playlist && (
          <div>
            {/* playlist header */}
            <div class='relative'>
              {/* content */}
              <div class='flex items-center gap-3 p-4 sm:gap-6 sm:p-5'>
                {/* playlist thumbnail with subtle hover effect */}
                <div class='relative h-[120px] w-[120px] flex-shrink-0 transform transition-all duration-300 hover:scale-[1.02] hover:shadow-lg sm:h-[160px] sm:w-[160px]'>
                  <Picture
                    src={playlist.image}
                    alt={playlist.name}
                    width={320}
                    height={320}
                    widths={[120, 160, 320]}
                    sizes='(max-width: 640px) 120px, 160px'
                    formats={['avif']}
                    fallbackFormat='webp'
                    class='h-full w-full rounded-lg border border-theme-500/50 object-cover shadow-md'
                    style={{
                      aspectRatio: '1/1',
                      objectFit: 'cover',
                    }}
                    loading='lazy'
                  />
                </div>

                <div class='flex h-auto flex-1 flex-col justify-center sm:h-[160px]'>
                  <div>
                    <div class='mb-1 flex flex-wrap items-center gap-x-2 gap-y-1'>
                      <span class='text-xs uppercase tracking-wider text-theme-300'>
                        Playlist
                      </span>
                      <span class='hidden text-theme-500 sm:inline'>•</span>
                      <span class='whitespace-nowrap text-xs text-theme-300'>
                        {playlist.tracks.length} tracks
                      </span>
                    </div>
                    <h3 class='font-brand mb-2 text-xl font-bold leading-tight text-theme-100 sm:text-2xl'>
                      {playlist.name}
                    </h3>
                    <p
                      class='line-clamp-2 text-sm text-theme-200 sm:line-clamp-3'
                      set:html={playlist.description}
                    />
                  </div>
                </div>
              </div>
            </div>

            {/* absolute positioned spotify play button in top right corner */}
            <Link
              href={`https://open.spotify.com/playlist/${PLAYLIST_ID}`}
              class='absolute right-3 top-3 z-10 text-theme-300 transition-all duration-200 hover:text-theme-100 sm:right-4 sm:top-4'
              underline={false}
              externalInNewTab={true}
              aria-label='Listen on Spotify'>
              <svg
                xmlns='http://www.w3.org/2000/svg'
                class='size-5 sm:size-6'
                viewBox='0 0 24 24'
                fill='currentColor'>
                <path d='M12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2ZM16.5576 16.6753C16.3329 17.0494 15.8557 17.1517 15.4816 16.9269C13.3292 15.6499 10.6751 15.3158 7.34181 16.0741C6.91541 16.1695 6.49846 15.9068 6.40307 15.4804C6.30768 15.054 6.5704 14.637 6.9968 14.5416C10.6661 13.7085 13.6754 14.0961 16.1059 15.5444C16.48 15.7691 16.5823 16.2464 16.3576 16.6205L16.5576 16.6753ZM17.7377 13.9453C17.4525 14.4109 16.8585 14.5359 16.3929 14.2508C13.9289 12.7733 10.3783 12.2656 7.02778 13.1959C6.49768 13.336 5.96217 13.0105 5.82209 12.4804C5.68201 11.9503 6.00746 11.4148 6.53756 11.2747C10.3783 10.2032 14.3666 10.7771 17.2271 12.5005C17.6928 12.7856 17.8178 13.3797 17.5326 13.8453L17.7377 13.9453ZM17.8229 11.1721C14.9129 9.47372 9.78287 9.27276 6.79677 10.3599C6.16716 10.526 5.51407 10.1455 5.34792 9.51586C5.18177 8.88626 5.56233 8.23317 6.19193 8.06702C9.65246 6.81113 15.3792 7.04859 18.7948 9.04519C19.3599 9.36957 19.5891 10.0928 19.2648 10.6579C18.9404 11.223 18.2171 11.4522 17.652 11.1279L17.8229 11.1721Z' />
              </svg>
            </Link>

            {/* tracks list with improved scrolling */}
            <div class='scrollbar-thin scrollbar-track-theme-700 scrollbar-thumb-theme-500 max-h-[350px] overflow-y-auto px-4 pb-4'>
              <div class='mb-2 grid grid-cols-[auto_1fr_auto] items-center gap-4 border-b border-theme-600 px-2 pb-2 text-xs uppercase tracking-wider text-theme-300'>
                <div class='w-8 text-center'>#</div>
                <div>Title</div>
                <div>Duration</div>
              </div>

              <div class='space-y-1'>
                {playlist.tracks.map((track: any, index: number) => (
                  <Link
                    href={track.external_url}
                    class='group grid grid-cols-[auto_1fr_auto] items-center gap-4 rounded-lg p-2 transition-all duration-200 hover:bg-theme-700'
                    underline={false}
                    externalInNewTab={true}>
                    <div class='w-8 text-center text-sm text-theme-400 group-hover:text-theme-300'>
                      {index + 1}
                    </div>

                    <div class='flex min-w-0 items-center gap-3'>
                      <div class='relative'>
                        <Image
                          src={track.image}
                          alt={track.name}
                          width={40}
                          height={40}
                          class='size-10 rounded border border-theme-600/50 object-cover shadow-sm transition-all duration-200 group-hover:border-theme-500/80 group-hover:shadow-md'
                          loading='lazy'
                        />
                        <div class='absolute inset-0 flex items-center justify-center rounded bg-black/60 opacity-0 transition-opacity duration-200 group-hover:opacity-100'>
                          <svg
                            xmlns='http://www.w3.org/2000/svg'
                            viewBox='0 0 24 24'
                            fill='currentColor'
                            class='size-5 text-white'>
                            <path d='M8 5V19L19 12L8 5Z' />
                          </svg>
                        </div>
                      </div>

                      <div class='min-w-0 flex-1'>
                        <h4 class='line-clamp-1 font-medium text-theme-200 transition-all duration-200 group-hover:text-theme-100'>
                          {track.name}
                        </h4>
                        <p class='line-clamp-1 text-sm text-theme-400 transition-all duration-200 group-hover:text-theme-300'>
                          {track.artist}
                        </p>
                      </div>
                    </div>

                    <span class='text-sm tabular-nums text-theme-400 transition-all duration-200 group-hover:text-theme-300'>
                      {`${Math.floor(track.duration / 60000)}:${String(
                        Math.floor((track.duration % 60000) / 1000),
                      ).padStart(2, '0')}`}
                    </span>
                  </Link>
                ))}
              </div>
            </div>
          </div>
        )
      }
    </div>
  </section>
</PageLayout>

<!-- Client-side script to handle section-specific period switching -->
<script
  define:vars={{
    allPeriodData: JSON.stringify(allPeriodData),
    periodMap,
    sections,
    defaultPeriod,
  }}
>
  // Parse the stringified data
  const parsedData = JSON.parse(allPeriodData)

  // Initialize section periods from URL params or with default
  const sectionPeriods = {}
  sections.forEach((section) => {
    sectionPeriods[section] = defaultPeriod
  })

  // Function to update content for a specific section
  function updateSectionContent(section, newPeriod) {
    // Store the section's period
    sectionPeriods[section] = newPeriod

    // Get the data for the selected period
    const periodData = parsedData[newPeriod]
    if (!periodData) return

    // Update section-specific content
    switch (section) {
      case 'header': {
        // Update header subtitle
        const subtitle = document.querySelector(
          '#lastfm .text-sm.text-theme-300',
        )
        if (subtitle) {
          subtitle.textContent = `my listening stats from last.fm (${periodMap[newPeriod].toLowerCase()})`
        }
        break
      }
      case 'loved-songs': {
        // Update loved songs content
        updateTracksList(
          'loved-songs-container',
          periodData.topTracks.slice(0, 6),
        )
        break
      }
      case 'top-albums': {
        // Update top albums content
        updateAlbumsList('top-albums-container', periodData.albums)
        break
      }
      case 'top-artists': {
        // Update top artists content
        updateArtistsList('top-artists-container', periodData.artists)
        break
      }
      case 'top-tracks': {
        // Update top tracks content
        updateTracksList('top-tracks-container', periodData.topTracks)
        break
      }
    }

    // Update the period selector for this section
    updatePeriodSelector(section, newPeriod)
  }

  // Update a specific period selector's state
  function updatePeriodSelector(section, newPeriod) {
    // Find the dropdown for this section
    const dropdown = document.querySelector(
      `.dropdown[data-section="${section}"]`,
    )
    if (!dropdown) return

    // Update the visible label
    const label = dropdown.querySelector('.group span')
    if (label) {
      label.textContent = periodMap[newPeriod]
    }

    // Update active state in dropdown
    const links = dropdown.querySelectorAll('.dropdown-content a')
    links.forEach((link) => {
      const linkPeriod = link.getAttribute('data-period')
      if (linkPeriod === newPeriod) {
        link.classList.add('bg-theme-accent', 'font-medium', 'text-theme-900')
        link.classList.remove(
          'text-theme-200',
          'hover:bg-theme-700',
          'hover:text-theme-100',
        )
      } else {
        link.classList.remove(
          'bg-theme-accent',
          'font-medium',
          'text-theme-900',
        )
        link.classList.add(
          'text-theme-200',
          'hover:bg-theme-700',
          'hover:text-theme-100',
        )
      }
    })
  }

  // Helper function to update tracks lists (both loved songs and top tracks)
  function updateTracksList(containerId, tracks) {
    const container = document.getElementById(containerId)
    if (!container) return

    // Clear existing content
    container.innerHTML = ''

    // Add new tracks
    tracks.forEach((track) => {
      const trackElement = document.createElement('a')
      trackElement.href = track.url
      trackElement.className =
        'group flex h-auto w-full items-center gap-4 rounded-lg border border-theme-500 bg-theme-800 p-3 shadow-md transition-all duration-200 hover:border hover:border-theme-accent/75 hover:bg-theme-700 hover:text-theme-200 hover:shadow-lg'
      trackElement.target = '_blank'
      trackElement.rel = 'noopener'

      const albumArt = track.albumArt || '/images/album.webp'
      const isLovedSongs = containerId === 'loved-songs-container'

      trackElement.innerHTML = `
        <img 
          src="${albumArt}" 
          alt="Album artwork for ${track.name} by ${track.artist.name}" 
          width="${isLovedSongs ? '64' : '48'}" 
          height="${isLovedSongs ? '64' : '48'}" 
          class="${isLovedSongs ? 'size-16' : 'size-12'} ${isLovedSongs ? '' : 'flex-shrink-0'} rounded-lg border border-theme-500 object-cover shadow-md"
          loading="lazy"
        />
        <div class="min-w-0 flex-1">
          <h4 class="line-clamp-1 font-medium text-theme-200 transition-all duration-200 group-hover:text-theme-100">
            ${track.name}
          </h4>
          <p class="line-clamp-1 text-sm text-theme-300 transition-all duration-200 group-hover:text-theme-200">
            ${track.artist.name} • ${Number(track.playcount).toLocaleString()} plays
          </p>
        </div>
      `

      container.appendChild(trackElement)
    })
  }

  // Helper function to update albums list
  function updateAlbumsList(containerId, albums) {
    const container = document.getElementById(containerId)
    if (!container) return

    // Clear existing content
    container.innerHTML = ''

    // Add new albums
    albums.forEach((album, index) => {
      const albumElement = document.createElement('a')
      albumElement.href = album.url
      albumElement.className =
        'group relative aspect-square overflow-hidden rounded-xl bg-base-300 shadow-md border-2 border-theme-500 transition-all duration-200 hover:border-theme-accent/75 hover:shadow-lg'
      albumElement.target = '_blank'
      albumElement.rel = 'noopener'
      albumElement.dataset.index = index

      const albumArt =
        album.image[3]['#text'] ||
        album.image[2]['#text'] ||
        '/images/album.webp'

      albumElement.innerHTML = `
        <img 
          src="${albumArt}" 
          alt="Album art for ${album.name} by ${album.artist.name}" 
          width="300" 
          height="300" 
          class="h-full w-full object-cover transition-transform duration-300 group-hover:scale-105"
          loading="eager"
        />
        <div class="absolute inset-0 bg-gradient-to-t from-theme-800/70 via-theme-800/30 to-transparent transition-all duration-200" role="presentation">
          <div class="absolute inset-0 flex flex-col justify-end bg-gradient-to-t from-theme-800/70 via-theme-800/30 to-transparent p-3 transition-all duration-200">
            <div class="space-y-0">
              <span class="inline-flex items-center gap-x-1 text-xs font-bold opacity-0 transition-all duration-200 group-hover:text-theme-accent group-hover:opacity-100">
                ${Number(album.playcount).toLocaleString()} plays
              </span>
              <h4 class="line-clamp-2 text-lg font-semibold text-theme-100 sm:text-sm">
                ${album.name}
              </h4>
              <p class="line-clamp-1 text-xs text-theme-200">
                ${album.artist.name}
              </p>
            </div>
          </div>
        </div>
      `

      container.appendChild(albumElement)
    })
  }

  // Helper function to update artists list
  function updateArtistsList(containerId, artists) {
    const container = document.getElementById(containerId)
    if (!container) return

    // Clear existing content
    container.innerHTML = ''

    // Add new artists
    artists.forEach((artist) => {
      const artistElement = document.createElement('a')
      artistElement.href = artist.url
      artistElement.className =
        'group flex h-auto w-full items-center gap-4 rounded-lg border border-theme-500 bg-theme-800 p-3 shadow-md transition-all duration-200 hover:border hover:border-theme-accent/75 hover:bg-theme-700 hover:text-theme-200 hover:shadow-lg'
      artistElement.target = '_blank'
      artistElement.rel = 'noopener'

      const artistImage =
        artist.image[3]['#text'] ||
        artist.image[2]['#text'] ||
        '/images/album.webp'

      artistElement.innerHTML = `
        <img 
          src="${artistImage}" 
          alt="${artist.name}" 
          width="48" 
          height="48" 
          class="size-12 flex-shrink-0 rounded-lg object-cover"
          loading="lazy"
        />
        <div class="min-w-0 flex-1">
          <h4 class="line-clamp-1 font-semibold text-theme-200 transition-all duration-200 group-hover:text-theme-100">
            ${artist.name}
          </h4>
          <p class="line-clamp-1 text-sm font-normal text-theme-300 transition-all duration-200 group-hover:text-theme-300">
            ${Number(artist.playcount).toLocaleString()} plays
          </p>
        </div>
      `

      container.appendChild(artistElement)
    })
  }

  // Add event listeners to period selectors
  document.addEventListener('DOMContentLoaded', () => {
    // Get all period selection links
    const periodLinks = document.querySelectorAll('.dropdown-content a')

    // Add click event listener to each link
    periodLinks.forEach((link) => {
      link.addEventListener('click', (e) => {
        e.preventDefault()
        const section = link.getAttribute('data-section')
        const newPeriod = link.getAttribute('data-period')

        if (section && newPeriod) {
          updateSectionContent(section, newPeriod)
        }
      })
    })
  })
</script>
