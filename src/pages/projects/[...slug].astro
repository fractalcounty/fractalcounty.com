---
import { type CollectionEntry, getCollection } from 'astro:content';
import PageLayout from '@layouts/PageLayout.astro';
import Container from '@components/Container.astro';
import FormattedDate from '@components/FormattedDate.astro';
import { readingTime } from '@lib/utils';
import BackToPrev from '@components/BackToPrev.astro';
import Link from '@components/Link.astro';

export async function getStaticPaths() {
  const projects = (await getCollection('projects'))
    .filter(post => !post.data.draft)
    .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());
  return projects.map((project) => ({
    params: { slug: project.slug },
    props: project,
  }));
}
type Props = CollectionEntry<'projects'>;

const project = Astro.props;
const { Content } = await project.render();
const title = project.data.showInBlog && project.data.blogTitle ? project.data.blogTitle : project.data.title;
const tags = project.data.tags || [];
---

<PageLayout 
  title={title} 
  description={project.data.description} 
  type="article" 
  publishedTime={project.data.date}
  tags={tags}
>
  <Container>
    <div class="animate">
      <BackToPrev href="/projects">
        Back to projects
      </BackToPrev>
    </div>
    <div class="space-y-1 my-10">
      <div class="animate flex items-center gap-1.5">
        <div class="font-base text-sm">
          <FormattedDate date={project.data.date} />
        </div>
        &bull;
        <div class="font-base text-sm">
          {readingTime(project.body)}
        </div>
      </div>
      <div class="animate text-2xl font-semibold">
        {title}
      </div>
      {(project.data.demoURL || project.data.repoURL || project.data.projectURLs?.length) && (
        <nav class="animate flex flex-wrap gap-1">
          {project.data.demoURL && (
            <Link href={project.data.demoURL} external>
              demo
            </Link>
          )}
          {project.data.repoURL && (
            <>
              {project.data.demoURL && <span>/</span>}
              <Link href={project.data.repoURL} external>
                repo
              </Link>
            </>
          )}
          {project.data.projectURLs && project.data.projectURLs.map((projectURL, index) => (
            <>
              {(project.data.demoURL || project.data.repoURL || index > 0) && <span>/</span>}
              <Link href={projectURL.url} external>
                {projectURL.label}
              </Link>
            </>
          ))}
        </nav>
      )}
    </div>
    <article class="animate">
      <Content />
    </article>
  </Container>
</PageLayout>