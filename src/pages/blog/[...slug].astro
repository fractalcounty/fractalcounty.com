---
import Container from '@/components/layout/Container.astro'
import Subheader from '@/components/layout/Subheader.astro'
import PostStructuredData from '@/components/meta/PostStructuredData.astro'
import PageLayout from '@/layouts/PageLayout.astro'
import { readingTime } from '@/lib/utils'
import { type CollectionEntry, getCollection } from 'astro:content'

export async function getStaticPaths() {
  const blogPosts = await getCollection('blog')
  const projectsInBlog = await getCollection('projects')

  const filteredBlogPosts = blogPosts.filter(post => !post.data.draft)
  const filteredProjects = projectsInBlog.filter(project => !project.data.draft && project.data.showInBlog)

  const allPosts = [...filteredBlogPosts, ...filteredProjects]
    .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf())

  return allPosts.map(post => ({
    params: { slug: post.slug },
    props: post,
  }))
}

type Props = CollectionEntry<'blog'> | CollectionEntry<'projects'>

const post = Astro.props
const { Content } = await post.render()
const title = (post.data.type === 'project' && post.data.showInBlog ? post.data.blogTitle : post.data.title) || 'Untitled Post'
const tags = post.data.tags || []
---

<PageLayout
  title={title}
  description={post.data.description}
  type="article"
  publishedTime={post.data.date}
  tags={tags}
  isContentPage={true}
>
  <PostStructuredData
    slot="structured-data"
    entry={post}
    type="blog"
  />
  <Container as="main">
    <Subheader
      title={title}
      date={post.data.date}
      readingTime={readingTime(post.body)}
      isPost={true}
      backUrl="/blog"
      backLabel="Back"
    />

    <article class="animate">
      <Content />
    </article>
  </Container>
</PageLayout>
